%!PS-Adobe-3.0 EPSF-3.0
%%Title: (G5)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 01:11:14 03/10/07
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 263 251
%%HiResBoundingBox: 0.0 0.0 263.0 251.0
%%Pages: 0
%%DocumentProcessColors: Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.16 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.16 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
				/FontMatrix matrix def
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 17973 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:e2f56983-c691-4a95-aa41-576e4c807b00' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Adobe PDF library 7.77'></rdf:Description>
<rdf:Description rdf:about='uuid:e2f56983-c691-4a95-aa41-576e4c807b00' xmlns:xap='http://ns.adobe.com/xap/1.0/'
 xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/' xap:CreatorTool='Adobe Illustrator CS2' xap:CreateDate='2007-03-10T01:04:03-04:00' xap:ModifyDate='2007-03-10T01:04:03-05:00' xap:MetadataDate='2007-03-10T01:04:03-05:00'><xap:Thumbnails><rdf:Alt><rdf:li rdf:parseType='Resource'><xapGImg:width>256</xapGImg:width><xapGImg:height>252</xapGImg:height><xapGImg:format>JPEG</xapGImg:format><xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqkfm7zdY+WtPS4mgnvbu5f0NO060jaWe5nIJEaBQQOlSzbAYqgvyw82X/m&#xA;3yNpvmG/hit7q+M5eCHlwURXEkSgcixPwoKmvXwxVlOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvPP8AnH3/AMlFoP8A0d/9Rs2KvQ8Vdirs&#xA;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&#xA;FXYq7FXYq7FXYq//2Q==</xapGImg:image></rdf:li></rdf:Alt></xap:Thumbnails></rdf:Description>
<rdf:Description rdf:about='uuid:e2f56983-c691-4a95-aa41-576e4c807b00' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:2FA63621CDCEDB11AAC18FCA223FD9AD' xapMM:InstanceID='uuid:6badc598-1c65-463c-8141-8fc1ef48a98c' xapMM:DerivedFrom=''/>
<rdf:Description rdf:about='uuid:e2f56983-c691-4a95-aa41-576e4c807b00' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>G5</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 263 251 rectclip
%ADOBeginSubsetFont: VRDAKY+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /VRDAKY+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f320cdf326b000000cc000000566376
7420962ad27600000124000006306670676dcc79599a000007540000066e
676c7966be96f005000068a40000112a686561641e076d8c00000dc40000
003668686561123312ff00000dfc00000024686d74780e34584000000e20
00001a286c6f6361006ea8980000284800001a2c6d6178700b470ca80000
4274000000206e616d65c0f2653b0000429400001b0d7072657052fec4e9
00005da400000aff67646972000000000000000000000000000103880190
00050000059a05330000011b059a0533000003d1006602120805020b0604
02020202020400007a878000000000000008000000004d6f6e6f00400020
fffc05d3fe510133073e01b2400001ffffff0000686f05ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b4043555441403f3e3d3c3b3a3938
373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c45234660
20b02660b004262348482d2c452346236120b02661b004262348482d2c45
234660b0206120b04660b004262348482d2c4523462361b0206020b02661
b02061b004262348482d2c45234660b0406120b06660b004262348482d2c
4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b0
4d44235920b09051582320b00d44235921212d2c20204518684420b00160
2045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b432343
0b2d2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45
b01a234445b01923442d2c2045b00325456164b050515845441b2121592d
2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0
0743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364
615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb017
23442d2cb01243588745b0112bb0172344b0177ae41b038a45186920b017
23448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae4595918
2d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b001
85592d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b8022323701020b802234520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b004
25b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b
2043b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc0385959
5959212121212d2c462346608a8a462320468a608a61b8ff806223201023
8ab902c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2cb0024354584b53234b515a58
381b2121591b21212121592d0dc100010000000300007a4bf7c15f0f3cf5
081b080000000000a2e3272a00000000b9d5b4f6faaffd671000080c0000
0009000100010000666900010000073efe4e00431000faaffe2610000001
0000000000000000000000000000068a0600010000000000023900000239
0000023900b002d7005e0473001504730049071d0077055600580187005a
02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba0239
000004730055047300df0473003c047300560473001a047300550473004d
047300610473005304730055023900b9023900aa04ac007004ac007204ac
00700473005a081f006f0556fffd0556009605c7006605c7009e055600a2
04e300a80639006d05c700a4023900bf04000037055600960473009606aa
009805c7009c063900630556009e0639005805c700a10556005c04e30030
05c700a105560009078d0019055600090556000604e300290239008b0239
00000239002703c100360473ffe102aa00590473004a0473008604000050
047300460473004b02390013047300420473008701c7008801c7ffa20400
008801c7008306aa00870473008704730044047300870473004802aa0085
0400003f02390024047300830400001a05c700060400000f040000210400
002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c70068
055600a205c7009c0639006305c700a10473004a0473004a0473004a0473
004a0473004a0473004a040000500473004b0473004b0473004b0473004b
023900bd023900230239ffe5023900090473008704730044047300440473
004404730044047300440473008304730083047300830473008304730049
033300800473006b0473001b0473005102cd006d044c000104e3009905e5
000305e50003080000e102aa00de02aa003d0464004e0800000106390053
05b4009a0464004e0464004d0464004d0473fffd049c00a003f4003805b4
007a069600a1046400000231000002f6002f02ec002d0625007f071d0044
04e3008104e3009e02aa00e804ac0072046400540473002e0464003304e5
001a047300860473008c080000ef0556fffd0556fffd0639006308000081
078d00520473fffc0800000002aa005302aa004701c7008001c7006c0464
004e03f4002f04000021055600060156fe390473ffe402aa005c02aa005c
040000170400001704730049023900b901c7006c02aa0047080000250556
fffd055600a20556fffd055600a2055600a20239008d0239ffe002390004
0239001506390063063900630639006305c700a105c700a105c700a10239
00c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa006b
02aa003a02aa00b702aa00280473000001c700030556005c0400003f04e3
002904000028021400bc05c7fffd0473004905560006040000210556009e
0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b06ac
006b06ac0021047300000639006d04730042023900b10556005c0400003f
05c700660400005005c700660400005004730046046bffe102aa01f10556
fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd055600a2
0473004b055600a20473004b0473009601c7004204730096025500880473
009a02ac008305c7009c0473008705c7009c047300870639006304730044
05c700a102aa008505c700a102aa003c0556005c0400003f04e300300239
002404e300300300002305c700a10473008305c700a10473008304e30029
0400002804e3002904000028046800a4063900600662005504a000480474
00480391006204f000440329002e05300048046bffe1040000b002eb0052
08c000330800004f040000990800004f040000990800004f040000980400
009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505e100bf038d008904d5ffd90180008002d50086071500610296000f
04d5009202d6008302d6008304d500b202d600700556fffd0473004a05c7
00660400005005c7006604000050055600a20473004b055600a20473004b
055600a20473004b0639006d047300420639006d047300420639006d0473
004205c700a40473008705c7001f047300060239ffce0239ffce0239ffe4
0239ffe40239fff60239fff5023900a301c700660400003701c7ffa20556
009604000088040000860473009601c7fffa05c7009c0473008705c900a5
0473008b0639006304730044063900630473004405c700a102aa006b0556
005c0400003f04e300300239000c05c700a10473008305c700a104730083
05c700a10473008305c700a104730083078d001905c70006055600060400
002101c700890556fffd0473004a08000001071d00440639005304e30081
023900b9078d001905c70006078d001905c70006078d001905c700060556
00060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac0022
06ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff0646
ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556fffd
055600960558fffe055600a204e3002905c700a4023900bf055600960558
000b06aa009805c7009c0533006d0639006305c700a40556009e04f20094
04e30030055600060556000906af007f05fb0061023900040556000604a0
0048039100620473008b01c7006b04600088049a008c0400001903870048
0473008b0473005c01c700890400008604000018049c00a00400001a0395
005c04730044048d008303db0056046000880433001105b4007a063f0057
01c7ffc9046000880473004804600088063f0057055700a206eb00320455
00a105c000640556005c023900bf02390004040000370875000d081500a4
06d5003104a900a10515000a05c000a00556fffd054000a7055600960455
00a1056b0000055600a20763000704d5004e05c000a105c000a104a900a1
0540001206aa009805c700a40639006305c000a00556009e05c7006604e3
00300515000a061500520556000905eb009f05550057075500a1078000a1
06550000071500a8054000a505c00055081500a405c7001a0473004a0495
005b0440008802eb008804ab00000473004b055afffb03ab003204780087
047800870380008604ab00180580008c046b008804730044045500880473
00870400005003aa0026040000210695004b0400000f0495008a042b0045
066b008d0695008d0500002805c0008b042b008404150030060000890455
001f0473004b0473000002eb00890415004b0400003f01c7008802390009
01c7ffa20740001306800083047300000380008604000021046b008803e9
00a1034a008808000041089500a00585002d02aa010102aa001e02aa0031
02aa003102aa010102aa007e02aa007e02aa008c02aa008c02aa010102aa
001002aa010102aa01210310007d02aa008c023300d202aa030b02aaff04
023900b90481006904560032033100190411002d04d1009601f9009b030f
005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca009b
04cf005001f9009b02d2003c0498005a043c00190488006e045f007303b1
001903d4000a0466009604130028058e00640524002803f2009b03f2009b
03f2009b01e3005a0356005a0686009b01f9ffac041300280413002803b4
ff5703b4ff570448002d058e0064058e0064058e0064058e006404810069
048100690481006904560032033100190411002d04d10096024b0000034a
000004b8008c024b00000413002803b0005003b4003c04cf005002d2003c
0498005a0488006e045f007303d4000a0466009604130028058e00640524
002801f9009b0456003203b00050045f0073049b003c0000ffdc0000ff25
0000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba019c
004601e50046019c0046019c004601ad0048019c004601b1004601510046
0435017c0435012e043500b7043500810435012c043500be043500af0435
00810435009a043500db04350085028d00c1043500b30600010006000100
02420036060001000435009e04350098043500cb06000100060001000600
0100060001000600010001b1004606000100060001000600010006000100
06000100060001000600010006000100051bffba06000100060001000600
010005b5003a05b5003a01f4ffba01f4ffba060001000600010006000100
060001000481003604350036043dffba043dffba03e9004a03e9004a067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
051b003204b5002406000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010001cf003001b1004601b1004601b1004001b1
004606000100060001000000ffdc0000fe510000ff160000ff160000ff16
0000ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000
ff160000ffdc0000ff200000ffdc0473004a080000000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100060001000600010006000100028d007f028d005d0600010004ee0015
034d007901a8000e01d6ffdc01a8005601d60010037500320375003201a8
002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d60013
05b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3005f
03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba04a7
ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a0036
0435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027064f
00270224ffba021affba04a7004604a700460224ffba021affba04cf002d
04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba02b4
002302b400230327ffba0327ffba043500450435004501f4ffba01f4ffba
024200360300fff7039affba0327ffba0375003203750032051b003204b5
0024051b003204b5002401f4ffba01f4ffba045a004004ce0049045a0026
04ce0039045a005304ce004a045a005304ce004a0600010006000100019c
0046019c00460600010006000100060001000151004601b1004606000100
0600010001ad004801e5004606000100060001000600010001b1004601b1
004601b1004601b1004601b1004001cf003006000100019c0046019c0046
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100028d00ca028d00c7028d00c6060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100060001000100ffba0800
ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000fc2f
0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd110000
fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b00a0
06ac006b06ac00190000feb60000fd730000fe080000fca60000fe530000
fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000fcf1
0000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc20000
fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000fc90
0000fd150000fc2c0000fc130000fc120000fb960000fb9601c700880556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b055600a20473004b
055600a20473004b0239006301c7001f023900ba01c7007c063900630473
004406390063047300440639006304730044063900630473004406390063
047300440639006304730044063900630473004406dc0063053f004406dc
0063053f004406dc0063053f004406dc0063053f004406dc0063053f0044
05c700a10473008305c700a10473008306d500a1055b008306d500a1055b
008306d500a1055b008306d500a1055b008306d500a1055b008305560006
04000021055600060400002105560006040000210556fffd0473004a0239
ffe201c7ffb0063900630473004405c700a10473008305c700a104730083
05c700a10473008305c700a10473008305c700a1047300830000fefe0000
fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a900a1
0380008604a900a10380008605c700a4046b00880473fffd040000140473
fffd04000014055600090400000f05550057042b0045055500a104730087
0605006304730055063900600473004405b5003a01f4ffba0224ffba021a
ffba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4fff9
0227ffce01a8000f01a8fff502aa00a402aa00a401a8000e01a8005601a8
00560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6fff5
01a8009301d6001303750032037500320375003203750032051b003204b5
002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b3003202b3
003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b30038
02b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5
ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327ffba
064f0027064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba04a7004604a7
004604a7004604a70046067f0014077600140327ffba041effba067f0014
077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba043500450435
004501f4ffba01f4ffba0435004504350045043500450435004504350045
0435004501f4ffba01f4ffba04350045043500450481003604350036043d
ffba043dffba024200360300fff7031a001a031a001a031a001a03750032
037500320375003203750032037500320375003203750032037500320375
003203750032037500320375003203750032037500320375003203750032
051bffba04b5ffba051b003204b5002401f4ffba01f4ffba037500320375
0032051b003204b5002401f4ffba01f4ffba051b003204b50024067f0045
067f0045067f0045067f004501a800280000fe290000fea20000ff300000
ff1d0000ff120000ff920000fe7e08fc003208ad00320000ffb50000ffb6
0000feed0000ff640000fe7e0000ff9f018d000002f6fffd0000fe820000
ff1004cd00320000ff580000ff580000ff640692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a00360435
ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4002f
01f4003b01f4001201f400b101f4006d067f00140776001401f9009b0000
fed902bc000003f2009b045afff504cefff5045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a045a005304ce004a045a
005304ce004a04350071043500ad045a000f04ce000f000000000000002a
0000002a0000002a0000002a0000002a0000002a0000002a0000002a0000
002a0000002a0000002a0000002a0000002a0000002a0000002a0000002a
0000002a0000002a0000002a000001e6000002c2000004ec000006c60000
0826000009e000000bb600000c6200000ef60000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a0000112a0000112a0000112a0000112a0000112a0000112a0000112a
0000112a0000112a0000112a0000112a0000112a0000112a0000112a0000
112a00010000068a0100003f0076000700020010002f00560000040d0aff
0003000200000046034e000000030000000000fe00000000000300000001
000a013e0000000300000002000e05de0000000300000003005e05c00000
000300000004000a013e0000000300000005001805ee0000000300000006
000e061e000000030000000700c4062c00000003000000080026077c0000
000300000009008a0da4000000030000000a04c200fe000000030000000b
00620e2e000000030000000c00660e90000000030000000d06b406f00000
00030000000e005c0ef60001000000000000007f0f520001000000000001
00050ff10001000000000002000712410001000000000003002f12320001
00000000000400050ff10001000000000005000c12490001000000000006
000712610001000000000007006212680001000000000008001313100001
00000000000900451624000100000000000a02610fd1000100000000000b
00311669000100000000000c0033169a000100000000000d035a12ca0001
00000000000e002e16cd0003000104030002000c16fb0003000104050002
0010170b0003000104060002000c171b0003000104070002001017270003
00010408000200101737000300010409000000fe00000003000104090001
000a013e0003000104090002000e05de0003000104090003005e05c00003
000104090004000a013e0003000104090005001805ee0003000104090006
000e061e000300010409000700c4062c00030001040900080026077c0003
000104090009008a0da4000300010409000a04c200fe000300010409000b
00620e2e000300010409000c00660e90000300010409000d06b406f00003
00010409000e005c0ef600030001040a0002000c16fb00030001040b0002
0010174700030001040c0002000c16fb00030001040e0002000c17570003
000104100002000e17670003000104130002001217750003000104140002
000c16fb0003000104150002001016fb0003000104160002000c16fb0003
000104190002000e178700030001041b00020010175700030001041d0002
000c16fb00030001041f0002000c16fb0003000104240002000e17950003
0001042a0002000e17a300030001042d0002000e17b100030001080a0002
000c16fb0003000108160002000c16fb000300010c0a0002000c16fb0003
00010c0c0002000c16fb00540079007000650066006100630065002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002e
00200044006100740061002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002f005400790070006500200053006f006c
007500740069006f006e007300200049006e0063002e0020003100390039
0030002d0031003900390032002e00200041006c006c0020005200690067
0068007400730020005200650073006500720076006500640043006f006e
00740065006d0070006f0072006100720079002000730061006e00730020
00730065007200690066002000640065007300690067006e002c00200041
007200690061006c00200063006f006e007400610069006e00730020006d
006f00720065002000680075006d0061006e006900730074002000630068
006100720061006300740065007200690073007400690063007300200074
00680061006e0020006d0061006e00790020006f00660020006900740073
0020007000720065006400650063006500730073006f0072007300200061
006e0064002000610073002000730075006300680020006900730020006d
006f0072006500200069006e002000740075006e00650020007700690074
006800200074006800650020006d006f006f00640020006f006600200074
006800650020006c00610073007400200064006500630061006400650073
0020006f006600200074006800650020007400770065006e007400690065
00740068002000630065006e0074007500720079002e0020002000540068
00650020006f0076006500720061006c006c002000740072006500610074
006d0065006e00740020006f006600200063007500720076006500730020
0069007300200073006f006600740065007200200061006e006400200066
0075006c006c006500720020007400680061006e00200069006e0020006d
006f0073007400200069006e0064007500730074007200690061006c0020
007300740079006c0065002000730061006e007300200073006500720069
0066002000660061006300650073002e00200020005400650072006d0069
006e0061006c0020007300740072006f006b006500730020006100720065
00200063007500740020006f006e00200074006800650020006400690061
0067006f006e0061006c002000770068006900630068002000680065006c
0070007300200074006f0020006700690076006500200074006800650020
0066006100630065002000610020006c0065007300730020006d00650063
00680061006e006900630061006c00200061007000700065006100720061
006e00630065002e002000200041007200690061006c0020006900730020
0061006e002000650078007400720065006d0065006c0079002000760065
00720073006100740069006c0065002000660061006d0069006c00790020
006f00660020007400790070006500660061006300650073002000770068
006900630068002000630061006e00200062006500200075007300650064
0020007700690074006800200065007100750061006c0020007300750063
006300650073007300200066006f00720020007400650078007400200073
0065007400740069006e006700200069006e0020007200650070006f0072
00740073002c002000700072006500730065006e0074006100740069006f
006e0073002c0020006d006100670061007a0069006e0065007300200065
00740063002c00200061006e006400200066006f00720020006400690073
0070006c00610079002000750073006500200069006e0020006e00650077
0073007000610070006500720073002c0020006100640076006500720074
006900730069006e006700200061006e0064002000700072006f006d006f
00740069006f006e0073002e004d006f006e006f0074007900700065003a
0041007200690061006c00200052006500670075006c00610072003a0056
0065007200730069006f006e00200033002e0030003000200028004d0069
00630072006f0073006f0066007400290041007200690061006c004d0054
0041007200690061006c00ae002000540072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e0020
0070006c0063002000720065006700690073007400650072006500640020
0069006e0020007400680065002000550053002000500061007400200026
00200054004d0020004f00660066002e00200061006e006400200065006c
0073006500770068006500720065002e004e004f00540049004600490043
004100540049004f004e0020004f00460020004c004900430045004e0053
0045002000410047005200450045004d0045004e0054000d000a000d000a
005400680069007300200074007900700065006600610063006500200069
00730020007400680065002000700072006f007000650072007400790020
006f00660020004d006f006e006f00740079007000650020005400790070
006f00670072006100700068007900200061006e00640020006900740073
002000750073006500200062007900200079006f00750020006900730020
0063006f0076006500720065006400200075006e00640065007200200074
006800650020007400650072006d00730020006f0066002000610020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e00200059006f0075002000680061007600650020006f00620074
00610069006e006500640020007400680069007300200074007900700065
006600610063006500200073006f00660074007700610072006500200065
006900740068006500720020006400690072006500630074006c00790020
00660072006f006d0020004d006f006e006f00740079007000650020006f
007200200074006f00670065007400680065007200200077006900740068
00200073006f006600740077006100720065002000640069007300740072
0069006200750074006500640020006200790020006f006e00650020006f
00660020004d006f006e006f0074007900700065002700730020006c0069
00630065006e0073006500650073002e000d000a000d000a005400680069
007300200073006f00660074007700610072006500200069007300200061
002000760061006c007500610062006c0065002000610073007300650074
0020006f00660020004d006f006e006f0074007900700065002e00200055
006e006c00650073007300200079006f0075002000680061007600650020
0065006e0074006500720065006400200069006e0074006f002000610020
007300700065006300690066006900630020006c006900630065006e0073
0065002000610067007200650065006d0065006e00740020006700720061
006e00740069006e006700200079006f0075002000610064006400690074
0069006f006e0061006c0020007200690067006800740073002c00200079
006f0075007200200075007300650020006f006600200074006800690073
00200073006f0066007400770061007200650020006900730020006c0069
006d006900740065006400200074006f00200079006f0075007200200077
006f0072006b00730074006100740069006f006e00200066006f00720020
0079006f007500720020006f0077006e0020007000750062006c00690073
00680069006e00670020007500730065002e00200059006f00750020006d
006100790020006e006f007400200063006f007000790020006f00720020
006400690073007400720069006200750074006500200074006800690073
00200073006f006600740077006100720065002e000d000a000d000a0049
006600200079006f00750020006800610076006500200061006e00790020
007100750065007300740069006f006e00200063006f006e006300650072
006e0069006e006700200079006f00750072002000720069006700680074
007300200079006f0075002000730068006f0075006c0064002000720065
007600690065007700200074006800650020006c006900630065006e0073
0065002000610067007200650065006d0065006e007400200079006f0075
002000720065006300650069007600650064002000770069007400680020
00740068006500200073006f0066007400770061007200650020006f0072
00200063006f006e00740061006300740020004d006f006e006f00740079
0070006500200066006f00720020006100200063006f007000790020006f
006600200074006800650020006c006900630065006e0073006500200061
0067007200650065006d0065006e0074002e000d000a000d000a004d006f
006e006f0074007900700065002000630061006e00200062006500200063
006f006e007400610063007400650064002000610074003a000d000a000d
000a0055005300410020002d002000280038003400370029002000370031
0038002d0030003400300030000900090055004b0020002d002000300031
003100340034002000300031003700330037002000370036003500390035
0039000d000a0068007400740070003a002f002f007700770077002e006d
006f006e006f0074007900700065002e0063006f006d004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d00200052006f0062
0069006e0020004e006900630068006f006c00610073002c002000500061
0074007200690063006900610020005300610075006e0064006500720073
002000310039003800320068007400740070003a002f002f007700770077
002e006d006f006e006f0074007900700065002e0063006f006d002f0068
0074006d006c002f006d0074006e0061006d0065002f006d0073005f0061
007200690061006c002e00680074006d006c0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d002f00680074006d006c002f006d0074006e0061006d0065002f
006d0073005f00770065006c0063006f006d0065002e00680074006d006c
0068007400740070003a002f002f007700770077002e006d006f006e006f
0074007900700065002e0063006f006d002f00680074006d006c002f0074
007900700065002f006c006900630065006e00730065002e00680074006d
006c547970656661636520a920546865204d6f6e6f7479706520436f7270
6f726174696f6e20706c632e204461746120a920546865204d6f6e6f7479
706520436f72706f726174696f6e20706c632f5479706520536f6c757469
6f6e7320496e632e20313939302d313939322e20416c6c20526967687473
205265736572766564436f6e74656d706f726172792073616e7320736572
69662064657369676e2c20417269616c20636f6e7461696e73206d6f7265
2068756d616e69737420636861726163746572697374696373207468616e
206d616e79206f6620697473207072656465636573736f727320616e6420
61732073756368206973206d6f726520696e2074756e6520776974682074
6865206d6f6f64206f6620746865206c6173742064656361646573206f66
20746865207477656e74696574682063656e747572792e2020546865206f
766572616c6c2074726561746d656e74206f662063757276657320697320
736f6674657220616e642066756c6c6572207468616e20696e206d6f7374
20696e647573747269616c207374796c652073616e732073657269662066
616365732e20205465726d696e616c207374726f6b657320617265206375
74206f6e2074686520646961676f6e616c2077686963682068656c707320
746f20676976652074686520666163652061206c657373206d656368616e
6963616c20617070656172616e63652e2020417269616c20697320616e20
65787472656d656c7920766572736174696c652066616d696c79206f6620
7479706566616365732077686963682063616e2062652075736564207769
746820657175616c207375636365737320666f7220746578742073657474
696e6720696e207265706f7274732c2070726573656e746174696f6e732c
206d6167617a696e6573206574632c20616e6420666f7220646973706c61
792075736520696e206e6577737061706572732c20616476657274697369
6e6720616e642070726f6d6f74696f6e732e4d6f6e6f747970653a417269
616c20526567756c61723a56657273696f6e20332e303020284d6963726f
736f667429417269616c4d54417269616ca82054726164656d61726b206f
6620546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
207265676973746572656420696e2074686520555320506174202620544d
204f66662e20616e6420656c736577686572652e4e4f5449464943415449
4f4e204f46204c4943454e53452041475245454d454e540d0a0d0a546869
73207479706566616365206973207468652070726f7065727479206f6620
4d6f6e6f74797065205479706f67726170687920616e6420697473207573
6520627920796f7520697320636f766572656420756e6465722074686520
7465726d73206f662061206c6963656e73652061677265656d656e742e20
596f752068617665206f627461696e656420746869732074797065666163
6520736f66747761726520656974686572206469726563746c792066726f
6d204d6f6e6f74797065206f7220746f676574686572207769746820736f
667477617265206469737472696275746564206279206f6e65206f66204d
6f6e6f747970652773206c6963656e736565732e0d0a0d0a546869732073
6f66747761726520697320612076616c7561626c65206173736574206f66
204d6f6e6f747970652e20556e6c65737320796f75206861766520656e74
6572656420696e746f2061207370656369666963206c6963656e73652061
677265656d656e74206772616e74696e6720796f75206164646974696f6e
616c207269676874732c20796f757220757365206f66207468697320736f
667477617265206973206c696d6974656420746f20796f757220776f726b
73746174696f6e20666f7220796f7572206f776e207075626c697368696e
67207573652e20596f75206d6179206e6f7420636f7079206f7220646973
74726962757465207468697320736f6674776172652e0d0a0d0a49662079
6f75206861766520616e79207175657374696f6e20636f6e6365726e696e
6720796f75722072696768747320796f752073686f756c64207265766965
7720746865206c6963656e73652061677265656d656e7420796f75207265
63656976656420776974682074686520736f667477617265206f7220636f
6e74616374204d6f6e6f7479706520666f72206120636f7079206f662074
6865206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e6f74
7970652063616e20626520636f6e7461637465642061743a0d0a0d0a5553
41202d202838343729203731382d303430300909554b202d203031313434
203031373337203736353935390d0a687474703a2f2f7777772e6d6f6e6f
747970652e636f6d4d6f6e6f7479706520547970652044726177696e6720
4f6666696365202d20526f62696e204e6963686f6c61732c205061747269
636961205361756e646572732031393832687474703a2f2f7777772e6d6f
6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d735f61726961
6c2e68746d6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f
68746d6c2f6d746e616d652f6d735f77656c636f6d652e68746d6c687474
703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f74797065
2f6c6963656e73652e68746d6c004e006f0072006d0061006c006e007900
6f00620079010d0065006a006e00e9006e006f0072006d0061006c005300
740061006e0064006100720064039a03b103bd03bf03bd03b903ba03ac00
4e006f0072006d00610061006c0069004e006f0072006d00e1006c006e00
65004e006f0072006d0061006c0065005300740061006e00640061006100
720064041e0431044b0447043d044b0439004e0061007600610064006e00
6f0074006801b001a10300006e00670041007200720075006e007400611b
066bb1540f4122031700ef031700ff03170003001f0317002f0317004f03
17005f0317008f0317009f03170006000f0317005f0317006f0317007f03
1700bf031700f00317000600400317b2923340b80317b28b3340b80317b3
6a6c3240b80317b2613340b80317b35c5d3240b80317b357593240b80317
b34d513240b80317b344493240b80317b23a3340b80317b331343240b803
17b32e423240b80317b3272c3240b80317b312253280b80317b30a0d32c0
4116031600d00316000200700316000102c4000f0101001f00a0031500b0
031500020306000f0101001f00400312b32426329fbf0304000103020301
0064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001f
ffc002edb30e11329f414a02e200af02e200bf02e2000302e202e202e102
e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02
e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd005f02
dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc00
01001002dc003f02dc000202dc02dc001002db000102db02db000f02da00
0102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f25
32b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb802e3b3
202b1fa0413002d400b002d40002000002d4001002d4002002d4005002d4
006002d4007002d40006006002d6007002d6008002d6009002d600a002d6
00b002d60006000002d6001002d6002002ca002002cc002002d6003002d6
004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02c700
17001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02c902
c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002c700
2f02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f02bf
004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800
001f02b200e90800001f02a600a20800406a1f4026434932402043493240
263a3d3240203a3d329f209f26024026969932402096993240268e923240
208e92324026848c324020848c3240267a813240207a813240266c763240
206c76324026646a324020646a3240265a5f3240205a5f3240264f543240
204f5432b8029eb724271f374f6b0120410f027700300277004002770050
0277000402770277027700f90400001f029bb22a2a1fb8029a402b292a1f
80ba0180bc0180520180a201806501807e01808101803c01805e01802b01
801c01801e0180400180bb0138000100800140b40180400180bb01380001
0080013940180180ca0180ad018073018026018025018024018020013740
b80221b2493340b80221b2453340b80221b341423240b80221b33d3e320f
410f0221003f0221007f0221000300bf022100cf022100ff022100030040
0221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e3a32
6f414802c3007f02c3008f02c300df02c30004002f02c3006002c300cf02
c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600
df02220001008f02220001000f0222002f0222003f0222005f0222007f02
2200ef0222000600bf022100ef02210002006f0221007f022100af022100
03002f0221003f0221004f0221000302c302c30222022202210221401d10
1c102b1048038f1c010f1e014f1eff1e023700161600000012110811b801
0db6f70df8f70d00094109028e028f001d001f0290028f001d001f028fb2
f91d1fb80198b226bb1f41150197001e0401001f013900260125001f0138
00730401001f0135001c0801001f0134001c02ab001f0132b21c561fb801
0fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd7
20b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b2
1fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b801
9ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52
265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f35
1cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231e
b80401b21f5537b80168402c07960758074f07360732072c0721071f071d
071b071408120810080e080c080a080808060804080208000814b8ffe040
2b0000010014061000000100060400000100041000000100100200000100
0200000001000002010802004a00b013034b024b5342014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52
b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb101
018e851bb0124358b900010111858d1bb900010128858d5959001816763f
183f123e113946443e113946443e113946443e113946443e11394660443e
11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b
1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901f201
f04544b901f101f045445958b9033e01f2455258b901f2033e4459594bb8
015653205c58b9002001f14544b9002601f145445958b9081e0020455258
b90020081e4459594bb8019a53205c58b9002501f24544b9002401f24544
5958b909090025455258b9002509094459594bb8040153205c58b1732445
44b1242445445958b917200073455258b9007317204459594bb804015320
5c58b1ca254544b1252545445958b9168000ca455258b900ca1680445959
4bb03e53205c58b11c1c4544b11e1c45445958b9011a001c455258b9001c
011a4459594bb05653205c58b11c1c4544b12f1c45445958b90189001c45
5258b9001c01894459594bb8030153205c58b11c1c4544b11c1c45445958
b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
2b01b33b59635c456523456023456560234560b08b766818b080622020b1
63594565234520b003266062636820b003266165b059236544b063234420
b13b5c4565234520b003266062636820b003266165b05c236544b03b2344
b1005c455458b15c406544b23b403b4523614459b3475034374565234560
23456560234560b089766818b080622020b134504565234520b003266062
636820b003266165b050236544b034234420b147374565234520b0032660
62636820b003266165b037236544b0472344b10037455458b137406544b2
4740474523614459004b5342014b5058b108004259435c58b108004259b3
020b0a124358601b2159421610703eb0124358b93b21187e1bba040001a8
000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b
59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b010
2342b0112342002b74757375001845694445694445694473737373747573
74752b2b2b2b74752b2b2b2b2b7373737373737373737373737373737373
73737373737373732b2b2b45b0406144737400004bb02a534bb03f515a58
b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ffc0604459
004bb02e534bb03a515a58b1030345b040604459004bb02e534bb03c515a
58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b75
2b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e4b5402
b0124b545ab012435c5a58ba009f02220001007359002b7473012b01732b
2b2b2b2b2b2b2b737373732b002b2b2b2b2b2b0045694473456944734569
44737475456944734569444569444569447374456944456944732b2b2b2b
2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2900>
[4395 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
end
%ADOEndSubsetFont
[/N13/VRDAKY+ArialMT 1 TZ
0.0 0.0 263.0 251.0 re
W
n
q
n
0.0 251.0 263.0 -251.0 re
W
n
true setSA
n
0.0 0.0 263.0 251.0 re
0.0 0.0 0.0 0.0 setcmykcolor
f
n
238.881012 143.479004 m
238.881012 146.839005 236.001007 149.479004 232.881012 149.479004 c
229.521011 149.479004 226.881012 146.839005 226.881012 143.479004 c
226.881012 140.359009 229.521011 137.479004 232.881012 137.479004 c
236.001007 137.479004 238.881012 140.359009 238.881012 143.479004 c
0.0 0.0 0.0 1.0  setcmykcolor
eofill
0.72 w
1 j
1 J
n
238.881012 143.479004 m
238.881012 146.839005 236.001007 149.479004 232.881012 149.479004 c
229.521011 149.479004 226.881012 146.839005 226.881012 143.479004 c
226.881012 140.359009 229.521011 137.479004 232.881012 137.479004 c
236.001007 137.479004 238.881012 140.359009 238.881012 143.479004 c
h
S
n
190.881012 29.479002 m
190.881012 32.84 188.001007 35.479 184.881012 35.479 c
181.521011 35.479 178.881012 32.84 178.881012 29.479002 c
178.881012 26.359001 181.521011 23.479002 184.881012 23.479002 c
188.001007 23.479002 190.881012 26.359001 190.881012 29.479002 c
eofill
n
190.881012 29.479002 m
190.881012 32.84 188.001007 35.479 184.881012 35.479 c
181.521011 35.479 178.881012 32.84 178.881012 29.479002 c
178.881012 26.359001 181.521011 23.479002 184.881012 23.479002 c
188.001007 23.479002 190.881012 26.359001 190.881012 29.479002 c
h
S
n
82.881004 29.479002 m
82.881004 32.84 80.001007 35.479 76.881004 35.479 c
73.521004 35.479 70.881004 32.84 70.881004 29.479002 c
70.881004 26.359001 73.521004 23.479002 76.881004 23.479002 c
80.001007 23.479002 82.881004 26.359001 82.881004 29.479002 c
eofill
n
82.881004 29.479002 m
82.881004 32.84 80.001007 35.479 76.881004 35.479 c
73.521004 35.479 70.881004 32.84 70.881004 29.479002 c
70.881004 26.359001 73.521004 23.479002 76.881004 23.479002 c
80.001007 23.479002 82.881004 26.359001 82.881004 29.479002 c
h
S
n
34.881001 143.479004 m
34.881001 146.839005 32.001003 149.479004 28.881001 149.479004 c
25.521002 149.479004 22.881001 146.839005 22.881001 143.479004 c
22.881001 140.359009 25.521002 137.479004 28.881001 137.479004 c
32.001003 137.479004 34.881001 140.359009 34.881001 143.479004 c
eofill
n
34.881001 143.479004 m
34.881001 146.839005 32.001003 149.479004 28.881001 149.479004 c
25.521002 149.479004 22.881001 146.839005 22.881001 143.479004 c
22.881001 140.359009 25.521002 137.479004 28.881001 137.479004 c
32.001003 137.479004 34.881001 140.359009 34.881001 143.479004 c
h
S
n
136.881012 221.479004 m
136.881012 224.839005 134.001007 227.479004 130.881012 227.479004 c
127.521004 227.479004 124.881004 224.839005 124.881004 221.479004 c
124.881004 218.359009 127.521004 215.479004 130.881012 215.479004 c
134.001007 215.479004 136.881012 218.359009 136.881012 221.479004 c
eofill
n
136.881012 221.479004 m
136.881012 224.839005 134.001007 227.479004 130.881012 227.479004 c
127.521004 227.479004 124.881004 224.839005 124.881004 221.479004 c
124.881004 218.359009 127.521004 215.479004 130.881012 215.479004 c
134.001007 215.479004 136.881012 218.359009 136.881012 221.479004 c
h
S
n
164.881012 167.479004 m
164.881012 164.119003 167.761002 161.479004 170.881012 161.479004 c
174.241013 161.479004 176.881012 164.119003 176.881012 167.479004 c
176.881012 170.600006 174.241013 173.479004 170.881012 173.479004 c
167.761002 173.479004 164.881012 170.600006 164.881012 167.479004 c
eofill
n
164.881012 167.479004 m
164.881012 164.119003 167.761002 161.479004 170.881012 161.479004 c
174.241013 161.479004 176.881012 164.119003 176.881012 167.479004 c
176.881012 170.600006 174.241013 173.479004 170.881012 173.479004 c
167.761002 173.479004 164.881012 170.600006 164.881012 167.479004 c
h
S
n
84.881004 167.479004 m
84.881004 164.119003 87.761002 161.479004 90.881004 161.479004 c
94.239998 161.479004 96.881004 164.119003 96.881004 167.479004 c
96.881004 170.600006 94.239998 173.479004 90.881004 173.479004 c
87.761002 173.479004 84.881004 170.600006 84.881004 167.479004 c
eofill
n
84.881004 167.479004 m
84.881004 164.119003 87.761002 161.479004 90.881004 161.479004 c
94.239998 161.479004 96.881004 164.119003 96.881004 167.479004 c
96.881004 170.600006 94.239998 173.479004 90.881004 173.479004 c
87.761002 173.479004 84.881004 170.600006 84.881004 167.479004 c
h
S
n
182.881012 93.479996 m
182.881012 90.119995 185.761002 87.479996 188.881012 87.479996 c
192.241013 87.479996 194.881012 90.119995 194.881012 93.479996 c
194.881012 96.601006 192.241013 99.479996 188.881012 99.479996 c
185.761002 99.479996 182.881012 96.601006 182.881012 93.479996 c
eofill
n
182.881012 93.479996 m
182.881012 90.119995 185.761002 87.479996 188.881012 87.479996 c
192.241013 87.479996 194.881012 90.119995 194.881012 93.479996 c
194.881012 96.601006 192.241013 99.479996 188.881012 99.479996 c
185.761002 99.479996 182.881012 96.601006 182.881012 93.479996 c
h
S
n
66.881004 93.479996 m
66.881004 90.119995 69.761002 87.479996 72.881004 87.479996 c
76.239998 87.479996 78.881004 90.119995 78.881004 93.479996 c
78.881004 96.601006 76.239998 99.479996 72.881004 99.479996 c
69.761002 99.479996 66.881004 96.601006 66.881004 93.479996 c
eofill
n
66.881004 93.479996 m
66.881004 90.119995 69.761002 87.479996 72.881004 87.479996 c
76.239998 87.479996 78.881004 90.119995 78.881004 93.479996 c
78.881004 96.601006 76.239998 99.479996 72.881004 99.479996 c
69.761002 99.479996 66.881004 96.601006 66.881004 93.479996 c
h
S
n
124.881004 57.48 m
124.881004 54.119999 127.761009 51.48 130.881012 51.48 c
134.241013 51.48 136.881012 54.119999 136.881012 57.48 c
136.881012 60.601002 134.241013 63.48 130.881012 63.48 c
127.761009 63.48 124.881004 60.601002 124.881004 57.48 c
eofill
n
124.881004 57.48 m
124.881004 54.119999 127.761009 51.48 130.881012 51.48 c
134.241013 51.48 136.881012 54.119999 136.881012 57.48 c
136.881012 60.601002 134.241013 63.48 130.881012 63.48 c
127.761009 63.48 124.881004 60.601002 124.881004 57.48 c
h
S
2.16 w
0 J
n
130.881012 219.479004 m
130.881012 56.043003 l
S
n
129.881012 218.912018 m
89.762001 167.521011 l
S
n
73.221001 93.479004 m
232.119019 143.827011 l
S
n
170.762009 167.087006 m
232.0 143.435013 l
S
n
183.683014 29.479002 m
188.317001 91.519997 l
S
0.0 sg
126.0811 235.639191 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 486 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>VRDAKY+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/one 20 def
end
VRDAKY+ArialMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N13 19.919998 Tf
(1) show
252.0811 139.639191 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 706 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/two 21 def
end
VRDAKY+ArialMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(2) show
192.0811 0.439499 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 1260 22 <00010056ffe6041605c0002b0159b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4028050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d
0e040701230d0c01b802a4b340000100bb01180029000d0135b40c0c1504
18ba02a4001902684027151e1c05041e290d12735f206f200220180d0d06
55208007732640212334302601002610260226b8fff4b70d0d065526902d
18b80138b219d301ba01380000ffc0400b212334200040000200902cb801
92b18b182b10f65d2bedf4ed10f62b5d712bedf42b5ded003fed3fedfde4
1112392fed10fd5de411123901111217393130013838015d005d01715913
371616333236353426232207371633323635342623220607273636333216
1615140607161615140023222656b41f956b7fafa27d334c14120b73b886
6a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca114
9e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e6>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/three 22 def
end
VRDAKY+ArialMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(3) show
60.0811 0.439499 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 1734 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/four 23 def
end
VRDAKY+ArialMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(4) show
0.0811 139.639191 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 2086 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/five 24 def
end
VRDAKY+ArialMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(5) show
75.201202 175.878891 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 2528 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/six 25 def
end
VRDAKY+ArialMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(6) show
183.0811 172.639191 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 2998 26 <000100610000041605a7000d0070400ec40d01040d010402080409030d00
b802bb4030020104090c0d73030302402123344f025f026f0203021a0f08
7309eb004f015f015f02033f015f016f017f010401190eb80192b18b182b
4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c391139011112
39313001715d13352115060003060723361212376103b58cfeed4b360fb9
0382f38904faad8c95fe12fefbb8dbad01ea01c79c00>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/seven 26 def
end
VRDAKY+ArialMT /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(7) show
203.0811 79.638702 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 3170 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/eight 27 def
end
VRDAKY+ArialMT /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(8) show
129.400894 31.639206 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 3830 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/nine 28 def
end
VRDAKY+ArialMT /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(9) show
48.241196 73.159195 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(1) show
59.280807 73.159195 m
%ADOBeginSubsetFont: VRDAKY+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VRDAKY+ArialMT gcheck setglobal} if
1 42 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>VRDAKY+ArialMT AddT42Char 
VRDAKY+ArialMT /CharStrings get begin
/zero 19 def
end
VRDAKY+ArialMT /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(0) show
n
130.881012 56.043003 m
184.0 29.435001 l
0.0 0.0 0.0 1.0 setcmykcolor
S
n
27.881001 142.042999 m
73.0 93.0 l
S
n
131.881012 219.043015 m
170.762009 167.087006 l
S
n
91.881004 166.043015 m
184.0 29.435001 l
S
n
29.0 142.0 m
188.0 93.0 l
S
n
89.881004 166.912003 m
29.0 142.0 l
S
n
233.0 145.433014 m
188.0 93.0 l
S
n
76.779007 29.041002 m
73.221001 93.479004 l
S
n
130.881012 56.043003 m
76.0 29.0 l
S
n
77.221001 30.479002 m
169.762009 167.087006 l
S
Q
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
