%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: q2-sally-soln.pdf
%%Creator: Adobe Acrobat 10.1.9
%%For: yingz
%%CreationDate: 4/30/14, 12:12 AM
%%BoundingBox: 0 0 363 363
%%HiResBoundingBox: 0 0 363 363
%%CropBox: 0 0 363 363
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 778 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="GNU Ghostscript 6.51"
   xmp:ModifyDate="2014-04-30T00:05:08-04:00"
   xmp:CreateDate="2014-04-29T23:44:48-04:00"
   xmp:MetadataDate="2014-04-30T00:05:08-04:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:ae6731df-b623-6849-bda2-6fcdd234778b"
   xmpMM:InstanceID="uuid:daca018b-ad67-af40-b9e6-2f95fc6f6f9f"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -363 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 363 li
363 363 li
363 0 li
cp
clp
1.8 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
362 1 mo
218 73 li
362 73 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
362 145 mo
218 181 li
362 217 li
@
362 289 mo
218 289 li
362 361 li
@
218 73 mo
1.99998 181 li
218 289 li
@
1.99998 181 mo
218 181 li
@
%ADOBeginSubsetFont: Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32105b1cf9000000cc000000606376
7420674129400000012c000003866670676df339f37a000004b400000a24
676c7966a6ff19fa00005cbc000398dc68656164cac835e500000ed80000
00366868656109860f6f00000f1000000024686d7478f19fb11d00000f34
000021a46c6f63610e06cda8000030d8000021a86d61787010d30b0d0000
5280000000206e616d6572caa220000052a00000064a70726570fd528966
000058ec000003cf676469720000000000000000000000000003fc2c0190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300200009
fb020600fea4003d07ae01db2000019f4f010000044205c2000000200000
05c0001105c2002d0597001d0442001d0000ffda0000ffdb0000ffdafe53
ffef05d0000afffdffed03340000012200000122dffb011400af000700b7
007e000400d200aa0109002300ed013200d9011d012a00d800fe00db00e2
001a008b00a0001a004500e801f6000900e90128013200360082009e009f
ff700070003f003f00e801050015003800e9ff7bffc8fff90042008a00c4
01070113011dffb9002f00870087009a009c010c0262ffb10018004c0077
0080008200c900daffb2ffea001a003600e50111012f043bffdd00020005
001a0039008900aa00b701210123012a015bffe5000200180023005c00aa
ff4dff76ffb2ffef001a002f004e007b008a00e1011f0126012b019a01de
03edff80ff8e0007001c004e005500630063006d00810098009c00ad011f
01260162041c051500390044004b0063008e00cc00e800f2010001290142
017802d503ea03f0043b049affc400050055005c0060009f0103011d0124
01550164017001ad01b401c301f602370261033903d5047004a100020055
008800a100bd00c700d300dd00eb00ed00fa00fd0104012b013e014f017b
019d01ad01e20233025d027d028c02da02ef033103de0407048b058505bb
ff04ffd5fffa0007001e002a003b004700510058006500650066006e0075
007f00840107009700b100c300cc00df00df010a0110012f013101470154
015b016b0179009101a401ba01dc01e401e601e901f60213021f0223022f
0276027d0282028902ad02b202b902ed03110374037d03c003de03f60415
045d04c004c004df052d0574061c064b0751fe94fedfff2dff90ff9affea
0016001600240029002d003e0104006d006d008400870089008e009c00a4
00ab00ae00b200b2fffb013900c400d100df00e100ef00f70121011c011c
012101320138015001510154016c016d017f019801a401aa01b601ba01bb
01bb00d701d701fb01fb01fe00190209022d025b026102790279029a0098
02d302da02ef030c03210328032d034b0353fff103ad03b103f20425045a
0471047b048a0498049f051c053d0557055a0570059505b605cb05d605ef
05f4061d068706a406b406d307080734079807fe012201320120012500b4
00be0082009603700132012400430184011d015600cc010500ed00c500fb
00f900c000a7011d00fe035500880026ffa100b8ff8800dd00bd00b5037c
003c00910293024aff3f03a803090132fff700820030002a002a002a002a
002a0000402a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d
6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c20b0032552582359212d2c69b04061b0008b0c6423648bb840
0062600c642364615c58b0036159b002602d2c45b0112bb0172344b0177a
e5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae5
182d2cb002254661658a46b040608b482d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b0005058b21a
401a4523604459b0005258b219401945236044592d2cb9187e3b210b2d2c
b92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b
2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b040
60b0206320b000525823b002253823b002256538008a63381b2121212121
59012d2c456920b00943b0022660b00325b005254961b0805358b2194019
4523616844b21a401a4523606a44b209191a45652345604259b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2c764520b00325452361681823686044
2d2c7645b00325452361682318456860442d2c7645b00325456168234523
61442db8002a2c4bb800095058b101018e59b801ff85b800441db9000900
035f5e2db8002b2c2020456944b001602db8002c2cb8002b2a212db8002d
2c2046b003254652582359208a208a49648a204620686164b00425462068
6164525823658a592f20b00053586920b000545821b040591b6920b00054
5821b0406559593a2db8002e2c2046b00425465258238a592046206a6164
b0042546206a61645258238a592ffd2db8002f2c4b20b0032650585158b0
80441bb04044591b21212045b0c05058b0c0441b2159592db800302c2020
456944b001602020457d691844b001602db800312cb800302a2db800322c
4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800332c4b535845441b2121592db80034
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
352c2020456944b001602db800362cb800352a212db800372c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800382c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800392c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db8003a2c2020456944b00160
2020457d691844b001602db8003b2cb8003a2a2db8003c2c4b20b0032653
58b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653
582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920
b80003265358b0032545b8018050582321b8018023211bb0032545232123
21591b2159442db8003d2c4b535845441b2121592db8003e2c4bb8000950
58b101018e59b801ff85b800441db9000900035f5e2db8003f2c20204569
44b001602db800402cb8003f2a212db800412c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db80042
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db800432c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800442c2020456944b001602020457d6918
44b001602db800452cb800442a2db800462c4b20b003265358b0801bb040
598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db800472c4b535845441b2121592db800482c4bb800095058b101018e59
b801ff85b800441db9000900035f5e2db800492c2020456944b001602db8
004a2cb800492a212db8004b2c2046b003254652582359208a208a49648a
204620686164b004254620686164525823658a592f20b00053586920b000
545821b040591b6920b000545821b0406559593a2db8004c2c2046b00425
465258238a592046206a6164b0042546206a61645258238a592ffd2db800
4d2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db8004e2c2020456944b001602020457d691844b001602db8
004f2cb8004e2a2db800502c4b20b003265358b0801bb040598a8a20b003
2653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800512c4b
535845441b2121592db800522c4bb800095058b101018e59b801ff85b800
441db9000900035f5e2db800532c2020456944b001602db800542cb80053
2a212db800552c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db800562c2046b00425465258238a59
2046206a6164b0042546206a61645258238a592ffd2db800572c4b20b003
2650585158b080441bb04044591b21212045b0c05058b0c0441b2159592d
b800582c2020456944b001602020457d691844b001602db800592cb80058
2a2db8005a2c4b20b003265358b0401bb000598a8a20b0032653582321b0
808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8
0003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db8005b2c4b535845441b2121592d0001000000010000412d
55a05f0f3cf50011080000000000a2272e8000000000c621bcf9f7dcfc27
0b7e0946000100090001000100000000000100000629fe2900000c01f7dc
fcdb0b7e00010000000000000000000000000000086905c7009a00000000
023900000239000002aa00e103cb00170473000004730038071d002f05c7
006f01e7006302aa005d02aa0015031d002f04ac00490239007602aa002f
023900800239ff90047300400473008e0473004004730036047300360473
00360473004004730034047300360473003d02aa00e802aa00e804ac0017
04ac004904ac001704e3007b07cd00c705c7003405c700a105c7005c05c7
009c055600a504e3009c0639005505c7009a023900840473002d05c700a1
04e3009c06aa009705c7009706390065055600a30639006505c700a30556
005504e3002105c7009c0556002f078d001e055600210556002304e30034
02aa00800239ff9002aa002f04ac008b0473000002aaffce0473003b04e3
007b0473004704e3003f0473002f02aa001504e3004204e3008702390089
02390009047300820239008b071d008004e3008704e3004204e3007d04e3
003c031d00820473004202aa001504e3007d0473001a0639000e0473001a
0473001504000021031d0000023d006a031d002d04ac000405c7003405c7
003405c7005c055600a505c700970639006505c7009c0473003b0473003b
0473003b0473003b0473003b0473003b047300470473002f0473002f0473
002f0473002f023900760239ffce0239ffb60239ffd504e3008704e30042
04e3004204e3004204e3004204e3004204e3007d04e3007d04e3007d04e3
007d047300470333005e04730045047300420473004102cd00910473ffc3
04e3008905e5001a05e5001a080000cb02aa007602aaffd5046400490800
00120639004705b400190464004904640047046400490473ffea049cffcb
03f4002405b4fff706960007046400290231007602f6002802ec000e0625
0031071d003804e3002a04e3006d02aa00e104ac00490464ffd50473001e
0464004904e5fffa047300af04730000080000bd0239000005c7003405c7
0034063900650800004b078d003f0473fffb080000f10400008b04000097
02390089023900840464004903f4002104730015055600230156fea305f4
004402aa00aa02aa00aa04e3001c04e3001c047300470239007102390092
040000920800000405c70034055600a505c70034055600a5055600a50239
00760239ffb60239ffd50239ffce06390065063900650652006906390065
05c7009c05c7009c05c7009c0239008902aaffb602aaffa802aaffbd02aa
ffc902aa009a02aa004202aa001202aaffd302aa004202aaffb604e3fff1
0239ffe8055600550473004204e3003404000021023d006a05c7001204e3
006d05560023047300150556008004e3008004ac004904ac005502aa0050
02aa001a02aa001206ac002f06ac005a06ac004e047300000639005504e3
004202390084055600550473004205c7005c0473004705c7005c04730047
04e3003f05c700340473003b05c700340473003b05c700340473003b05c7
005c0473004705c7005c0473004705c7009c0600003f055600a50473002f
055600a50473002f055600a50473002f055600a50473002f055600a50473
002f0639005504e300420639005504e300420639005504e3004204e30042
05c7009a04e3008705c7000f04e3fff1035cfffc037100010366000a035c
000c0239000a0239000206ac0084047200890473002d027bffc905c7008e
0473005804e3009c0271008b04e3009c0239002704e3009c0356008b04e3
009c0329008b05c7009704e3008705c7007504e3005c05c7009704e30087
04e300870639006504e300420639006504e300420639006504e3004205c7
00a3031d008205c70092031d006905c700a3031d00360556005504730042
055600550473004204e3002102aa001504e3002103b8001504e3002102aa
ffe305c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c
04e3007d05c7009c04e3007d05c7009c04e3007d078d001e0639000e0556
00230473001504e300340400002104e30034040000210556005504730042
04e3002102aa0015047300360000fc910000fc900000fc250000fc180000
fc2c0000fc360000fd0d0000fc450000fcb50000fbd80000fc250000fd01
0000fc9d0000fcb50000fbfb05c700120639005504e3004204e3009c0239
008b05c700a10473008205c7009704e3008705c700a3031d0080020e0008
02aa00e702aa002f023900090473008202aa0015047300300473002e0473
00460473003a0000fcfb0000fc2c0000fc360239ffcc0239ffc905c70097
04e300870000fc2b05c7002905c700a805c700a804a000a805c700190556
00a80800001904e3003d05c7008f05c7008f05c700b205ec004e06aa008f
05c7008f0639005a05c7008f055600a805c7005a04e500190556003106ac
003d0556001b05c7008f0556005a078d008f078d008f06aa002f078d00a8
055600a805c7005a0800008f05cb00460473003904e3004604e3008f038d
00870531001f0473003506ac00100400002d04e3008704e3008704e3008f
0556004605c7008704e3008704e5004604e3008704e3007f047300460400
00290473001d06a800460473001f04e300870473003f06ac008706aa0087
0556002906aa008704a000850473004606aa008704e30056055600a80473
003504a000a8038d0087023900830239008f0473002f05c7005a04730046
0239ffcf0239ffcf080000140750004607e9008f070e0087023900040556
004e0664001704e3002905c700b204e3008f047300440617001004e30029
055600310473001d05c7008f04e3008504e300a8038d00870000fd010000
fd010000fd010000fd010000fbd80000fd430000fc9e0000fc360000fc91
0000fc900000fc2c0000fd0d0000fc450000fcb50000fd430000fc250000
fc250000fc360000fc360000fc180000fc540000fc2c0000fc180000fc2c
0000fc2c0000fc2c0000fd0d0000fc2c0000fd010000fc360000fc240000
fc9e0000000002aa001504e30086071d0080031d0081071d0080031d0082
031d0081040a0046040a004702390089030bffd802aa001502aa00150473
00190639000d0473001404e3007b04e3007b04e3007b0473008104bc003b
04bc003b05c7005b05c70012049e0048055600a4055600560473004304c3
003d0758009c0671007d0633005b023d00a5043b00a502aa00e10494001b
04730047011d004502aa00af02aa00af0b620004056500bd02a500bd0400
00970239008502aa002f0473000004e200af04e200af06e400af06e400af
02aa002f02a500bd02aa002f080000f1055401d000000000000000000000
000000000000000000000000000000000000000000000239000002390000
023900000239000002390000023900000239000002390000023900000000
000000000000000000000000000000000000023900000239000002aafff6
043b00a504e3007b02aa002f02aafff6047300050473000005c7003404e3
009c0473002e07920065065c00420000fd220000fd220000fd220000fd22
0000fc900000fc8d0000fd470000fc790000fc990000fc940000fc860000
fc9a0000fc080000fcf10000fcf70000fc800000fc820000fc540000fbfb
0000fc810000fc810000fc810000fc820000fc820000fc3602aa00af04e2
00af02aa00af02aa00af046400130464001804510011046e002405b40077
05b400830231ff5e0231ff6d0464ff520464ffd5046400110464001908fa
005e0816005e05c700a1023900840472008406ab0084078f00840556002f
078f002f09c8002f0c01002f078f008405560021078f002109c8002104e3
009c05c7005c05c7009c06aa0097023900890472008906ab008906ac0089
0473001a06ac001a08e5001a0b1e001a06ac00890473001a06ac001a08e5
001a0239008b0473004704e3003f071d008009d70047090f0057087b003f
0876006c06af006c042c008b09440062073f00670667005c05c700340473
003b0239ffb60239ffb60639006504e3004205c7009c04e3007d05c7009c
04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7
00340473003b05c700340473003b08000012071d00380639005504e30042
05c700a1047300820639006504e300420639006504e300420239ffb60a0c
006c0939006708ab003f0639005505c7009704e3008705c700340473003b
08000012071d00380639004704e3002a05c700340473003605c700340473
003b055600a50473002f055600a50473002f0239ff1d0239ff190239ffc6
0239ffcc0639006504e300420639006504e3004205c700a3031dffaa05c7
00a3031d005e05c7009c04e3005c05c7009c04e3007d05c7009a04e30087
05c700340473003b055600a50473002f0639006504e300420639006504e3
00420639006504e300420639006504e30042055600230473001504000097
0239008405c700340473003b05c700a104e3007b05c700a104e3007b05c7
00a104e3007b05c7005c0473004705c7009c04e3003f05c7009c04e3003f
05c7009c04e3003f05c7009c04e3003f05c7009c04e3003f055600a50473
002f055600a50473002f055600a50473002f055600a50473002f055600a5
0473002f04e3009c02aa00150639005504e3004205c7009a04e3008705c7
009a04e3008705c7009a04e3008705c7008204e3006605c7009a04e30087
0239ffa80239ff9f0239ffd90239ffe905c700a10473008205c700a10473
008205c700a10473008204e3009c0239008b04e3009c0239ffbd04e3009c
0239ffbd04e3009c0239ffad06aa0097071d008006aa0097071d008006aa
0097071d008005c7009704e3008705c7009704e3008705c7009704e30087
05c7009704e300870639006504e300420639006504e300420639006504e3
00420639006504e30042055600a304e3007d055600a304e3007d05c700a3
031d008205c700a3031d008205c700a3031d005105c700a3031d00010556
005504730042055600550473004205560055047300420556005504730042
055600550473004204e3002102aa001504e3002102aa001504e3002102aa
ffe304e3002102aa001505c7009c04e3007d05c7009c04e3007d05c7009c
04e3007d05c7009c04e3007d05c7009c04e3007d0556002f0473001a0556
002f0473001a078d001e0639000e078d001e0639000e078d001e0639000e
078d001e0639000e078d001e0639000e055600210473001a055600210473
001a055600230473001504e300340400002104e300340400002104e30034
0400002104e3008702aafffc0639000e0473001502aa001505c700340473
003b05c700340473003b05d3003404ec003b05d7ffe804a8ff8405c70034
048d003b05c700340473003b05c700340473003b05c700340473003b05c7
00340473003b05c700340473003b05c700340473003b05c700340473003b
055600a50473002f055600a50473002f055600a50473002f057500a5047d
002f0556002b04a2ffb3055600a50473002f055600a50473002f055600a5
0473002f023900840239008902390084023900890639006504e300420639
006504e300420639006504e300420639006504e3ffbf0639006504e30042
0639006504e300420639006504e3004207920065065c004207920065065c
004207920065065c004207920065065c004207920065065c004205c7009c
04e3007d05c7009c04e3007d0758009c0671007d0758009c0671007d0758
009c0671007d0758009c0671007d0758009c0671007d0556002304730015
055600230473001505560023047300150556002304730015055600a50473
002f055600a50473002f056d008505df008d048600370486008708d90020
06dd000b056d002904860026056d002904860026056d00850486003708d9
002006dd000b054f003d040a002a05df008d0486008705df008d04860087
0655005a0486005005df005b04120050056d00160412001e056d00160412
001e056d00160412001e05ac0058047a004c074800a80600008d08000012
071d003806aa0097071d008005c700a3031d00600222ffbc05c7003705c7
00a204e300a205c7001b055600a204e3003d05c700a206390068025e0093
05c700a20558002d071a00ae063900ba04e300520639006805c700a20556
00a204e3002f04e500290556002705c700420556002d06ac007b06390044
025e00040556002704e5004804d500770473002504e3006204730077038d
005204e1009a04e100810239008d0473008d0473003104e1009a04730031
0400005604e5006004e3009a0473004e04e500600400004604e1009a05c7
00580473001405c7006d05c7003b0239ffe904e1009a023900710222ffb2
0000fd4802c601a401c7006a01c7006a0000fc910000fc9001c7006a0329
0014032900140340006a036a006a022200060222008c0376006a01c7ff9e
036e006a01c7ff9e08000073062500310639fffe02390089023900840554
00e1078d007b078d00e10473002f0473002f05c700340473003b0473003b
055600a50473002f055600a50473002f055600a50473002f0239ffbb0239
ffb7023900890639006504e300420639006504e300420639006504e30042
055600550473004205c7009c04e3007d0473001a0758009c0671007d0602
003f04e3ffff05c7000d04e30087071d0080043f009c0460007f04000060
04d9006e0356fff8048b00350602005d047300350655004b048600370639
006502aaffef07ac001b07ac001b09b600870000f9290000f9d30000f9d3
0000f9650000f9dd0602005d047300350655004b048600370222008c0329
00140464003104e300340400002104e3004205300087052b003f04e30077
04e3003f04e3004204e30087054500870271008b078d003f03c60081031d
008104e3003c04e3fffe04e3fffe0800003f064c001504db001506b00015
057f008b0555008b01a4006f01a4006f0239008402aa010d02aafff602aa
00af02aa000702aa010d02aafff602aa00af02aa000701a4006f01a4006f
02aaffef02aafff60272004402720044011d0005018f0041018f004101e3
0041031d0007023a000b0272003e0272003e0256000c0256000c02560013
0256001302aa002f025600250256002502560025023900210239000d011c
00450256002b0239001202560013025600130256000c0256000c02aa007b
0272003e0000fc870000fc690000fc690000fd260000fd260000fc2c0000
fc2c0000fb4f0000fc690000fc2c0000fc870000fc810000fc8100000000
02390000000000000000000000000000031d002f031d002f08dc00af07ac
001b02aa00e809c6007b07ac001b071d01040702000602aa008002aa0080
00000000000000000000000000000000000000000000000006c5001b023a
0020023a001b0239001b02390020023a001a0239001b0239001e02560025
01550018025600250155002e0155000a02720044023a0020023a0047023a
00200239001b023a001b0239001b02390020023a001a0239001b0239001e
0256002501550018025600250155002e0155000a06f900340639005504e3
009c04e3009c0556002307d6fff70600002a078e001104e300820800004e
06ac002f05c7005c05c7006f04e5fffa0696000707d6002507d600310556
009b04e300730556009b04e3007304e3001306390065052b009a02ad002f
036dfff605c7004203060017030bffd804e3007b04e3007b023900090239
000904e3004204e5004804e5004804e5004804e5004804e5004804e50048
04e5004804e500480629006a063b006a086e009b081d006e078d006a07f0
006a078e0070078e00480473007704730077047300770473007704730077
04730077071d006a071d00b208cc009008c4009a0896009108c0009504e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
078e006a078e006a093d006a0935006a0907006a0931006a078eff9e078e
ff9e0239008d0239008d0239ffbc0239ffc00239ffd00239ffc00239ffd3
0239ffd30425006a0425006a05d4006a05cc006a059e006a05c8006a0425
ff9e0425ff9e04e5006004e5006004e5006004e5006004e5006004e50060
0800006a0800006a09af006a09a7006a0979006a09a3006a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a071d006a
08c4006a08c0006a0792ff9e05c7003b05c7003b05c7003b05c7003b05c7
003b05c7003b05c7003b05c7003b07ec006a07ec006a099b006a0993006a
0965006a098f006a07ecff9e07ecff9e04e5004804e50048047300770473
007704e1009a04e1009a023900510239005504e5006004e5006004e1009a
04e1009a05c7003b05c7003b04e5004804e5004804e5004804e5004804e5
004804e5004804e5004804e500480899006a0878006a0a73006a0a7c006a
0a15006a0a77006a09c7006609c7006604e1009104e1009104e1009104e1
009104e1009104e1009104e1009104e1009109c7006a09c7006a0b76006a
0b6e006a0b40006a0b6a006a09c7ff9e09c7ff9e05c7003b05c7003b05c7
003b05c7003b05c7003b05c7003b05c7003b05c7003b0a25006a0a25006a
0bd4006a0bcc006a0b9e006a0bc8006a0a25ff9e0a25ff9e04e5004804e5
004804e5004804e5004804e5004804e5004804e5004805c7003705c70037
06cd000606cd008c07d8003704e1009104e1009104e1009104e1009a04e1
0091076300060784008c07e2000607ca008c080700a20239ffbf0239ffa9
0239ffb50239ffb50239ffcf0239ffc9025effd2025effc2043b002d0453
008c04e1009a04e1009a04e1009a04e1009a04e3009a04e3009a04e1009a
04e1009a055600270556002707a500580797008c071d006a05c7003b05c7
003b05c7003b05c7003b05c7003b07f60045082b0058086500060899008c
0852003104e500480473007704e1009a0239008d04e5006004e1009a05c7
003b06cd008c0784008c07ca008c0453008c07d4005d0775006b0842006b
0239ffb504e1009a067d003d04f700db04f7007b03220013031e002b0464
003104e5004804e5004804e5004804e5004804e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e5004804e5
004804e500480239ffb60239ffb60239ffb40239ffb60239ffb60239ffb6
0239ffb60239ffb60239ffb60239ffbe0239ffbe0239ffb40239ffbe0239
ffbb0239ffbe0239ffbe0239ffbe0239ffbe04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
06cd000606cd008c0629006a086e006a078d006a063b006a085c006a07f0
006a06cd000606cd008c0629006a086e006a078d006a063b006a085c006a
07f0006a047000060453008c0453008c0425006a05d4006a059e006a0425
006a05cc006a05c8006a047000060453008c0453008c0425006a05d4006a
059e006a0425006a05cc006a05c8006a07a500060797008c0797008c071d
006a08c4006a08c0006a071d006a08c4006a08c0006a07a500060797008c
0797008c071d006a08c4006a08c0006a071d006a08c4006a08c0006a05c7
00a305c7005c063900650239003b05aa008f055600a305c7004a0000fcfb
04b5004a04e3003f0639005a04e5004607b0004107b4004205e5001a06ac
004506ac004506ac004306ac0043063900b405560029082200a205e1005b
06ac007b05c7006d05c700340473001a080a00a20642005b0547001503d0
001f0636003005ba002905c700a30473003b02aaffcc04ac009a0425009a
063d009a0524008705c700a10473008204e300340400002108d9ffef06dd
fff7054f0062040a0033056d00a00412006a05df00a20486007c05df005f
0412002c04f8002204120028056dfff80412ffe105ac00a0047a006205ac
00a0047a0062055600230556002304d900ac037c007505ac00a004d70062
06e300a00552006a077600a205d9007c05560023055600230731001305d1
00230767002505f800250767002505f80025075b00360543001b05df00a2
0486007c0473003b054f00a6054f00a606ac007b04f0005b088a003e06a6
003305c7003904e1001d05eb002f04e3001a04730047054f0062040a0033
05f10022049c001402390089056dfff80412ffe10556002f05c7003405c7
005c0473004704e3fff104e3002102390059031e002b04e30021055600a3
04e3007b04e3007b055600a50473002f0473002d0239fff305c7009c01a9
001a01a9001a02aa000c02aa000c02aa000702aaffe102aa00e802aa0024
02aa0024067d0057067d003d067d00ad02aa00e8067d003d067d005c067d
011002aa00e802aa00e8063900680412002c0412002c055600a504e30080
05c7005c06aa0097063000970548001605c7005c05c7005c05c7005c0473
0047047300470473004704e3003f061b003a06a80039062e003b0384002b
062200240549003b04e5004f02aa00bf02aa00bf02aa00bf02aa00bf025d
003d025e003d03cc000903cc000903c3000003c3000003c3000004c20013
03fe0027043c005c044400780444007803070055034f0012070f003e0662
004405fe00350000f7dc0698004a0545004901ec004e01f4004e01b3002a
01b2000c01d3002b01d3001a033c001f0343001f03420013033f0013033f
001302ff004e0224000a0224000b07ec003d0982004e0933004b09330002
0149004e0485002505d2000705d1000d04d10014047a00200224000a0224
000b044b0041044b004104290041038c0008049e00440000fb230000fc72
0000fb870000fc180000fc180000fa110000fcaf0000fe390000fc470000
fc100000f9d30000fc5e04cc003c04cc00380468003c046800380821001b
04a60021044400220533003b069a0037057f003a071d006a08c4006a08c0
006a05c7003705c70037025effd3025effd20556002705560027045f0016
05e5001a05e5001a05e5001a0800ffeb0800ffeb080003b40800038c0800
03b40800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe9
08000000045f0016011d0045023a001e023a001802720021023a000d023a
001805c7005c0639005505c7005c045e0023063c002f04e3002105c70034
05320053062500320508003205c70058071d008006420033067800390832
003604b5004a04b5004a0347004203430047034600410343004703460057
0344004f034600570344004f03a1005703940057039400570394005703a1
005703a0000d03940000039400000394000003a0000d03e9005703dd0057
03dd005703dd005703ea00570397000303fc003803fc00290412001505a8
003106de002e039b00730000fbf40000fbf40000fbe00000fbe00000fbe0
0000fbe00000fb9e0000fb9e0000fcf104cc0038046800380aac00650956
00420444007804440078044400780329002a0329002a035d002a050d0028
037800570378002d032900210329002102de003202de00320378002f0194
00610329005c050d005b037800600378002f032900320378002f0378002f
0378005901e4000f037800590383003a050d005b03290012036e00540329
001a0378004604f40052066f003604f5005204e3004204e300410501003b
04fe003d0530003b078e00420329000e019400610236005c037800590329
0012036e00540329001a0378006d0329000e040a00460604001202390089
043c005c0898002907240037052c00210558001d0320000e052b00230373
0017031c000f031f00100239009204000092023900850400009702390092
0400009202390085040000970519001b070200090310007e05d500a208c0
0022047300400320002e0493006004730036047300360473003604730040
04730034046000360473003d03cc000903cc000903cc0009000000000000
0068000000680000006800000068000000dc000001440000035400000494
0000063400000890000008dc0000096c000009ec00000b0000000b700000
0be000000c1c00000c6000000cd800000dac00000e1400000f0c00001014
000010e0000011ac000012ac0000132c0000142000001508000015640000
15fc0000168c000016e40000177c0000184c00001a2800001b4400001c28
00001d0c00001db800001e1c00001e8000001f8400001fec0000203c0000
20b8000021a0000021ec000022f80000238800002434000024c000002614
000026f400002834000028940000291c000029c000002b8000002cc40000
2da400002e4c00002eb000002f1c00002f840000303000003064000030b8
00003200000032b00000338c000034400000356800003634000037280000
37bc00003824000038ac000039d800003a1800003b6800003c0800003cb4
00003d7000003e2800003ebc00003fc80000405c00004104000041cc0000
424800004388000044b8000045800000465c000046a00000478000004830
000048480000486000004988000049a0000049b8000049d0000049e80000
4a0000004a1800004a3000004a4800004a6000004a7800004bb400004bcc
00004be400004bfc00004c1400004c2c00004c4400004c5c00004c740000
4c8c00004ca400004cbc00004cd400004cec00004d0400004d1c00004d34
00004d4c00004d6400004ddc00004e4c00004fdc00005160000052d80000
5364000053e0000054ec000057480000591400005a1400005a6c00005ad0
00005bb000005c9000005e0800005f0c00005f8c0000602c000060d00000
62040000631400006400000064b800006520000065a00000665800006798
00006830000068f400006a8800006bec00006cbc00006d3000006d780000
6e5800006f5c000070a400007170000072780000737c000073ec000073ec
000074040000741c000074340000753400007684000076bc000076f80000
77a000007850000078b4000079100000798c00007aac00007ac400007adc
00007b1c00007c8800007d2800007dcc00007ea400007f68000080080000
805c000080d000008188000083140000832c000083440000835c00008374
0000838c000083a4000083bc000083d4000083ec000084040000841c0000
84c4000084dc000084f40000850c0000852400008570000085fc000086dc
00008718000087b4000088040000889800008970000089d800008a740000
8b4c00008c2400008cf000008d0800008d2000008d3800008d5000008dc4
00008ea40000900800009020000090380000912c000091cc000092080000
92b40000930c000093a400009478000095980000969000009814000098c0
000098d8000098f00000990800009a9c00009bcc00009be400009bfc0000
9c1400009c2c00009cf400009d0c00009d2400009d3c00009d5400009d6c
00009d8400009d9c00009db400009dcc00009de400009dfc00009f4c0000
9f6400009f7c00009f9400009fac00009fc400009fdc00009ff40000a00c
0000a0240000a03c0000a0540000a06c0000a0840000a09c0000a0b40000
a0cc0000a0e40000a0fc0000a1140000a1f80000a2100000a2280000a240
0000a2580000a2700000a2880000a2a00000a2b80000a2d00000a2e80000
a3000000a3180000a3300000a3480000a3600000a3780000a3900000a42c
0000a4b80000a4d00000a4e80000a5000000a5180000a5300000a5480000
a5600000a5780000a5900000a5a80000a5c00000a5d80000a5f00000a608
0000a6200000a6380000a6500000a6680000a6800000a6980000a6b00000
a6c80000a6e00000a6f80000a7100000a7280000a7400000a7580000a85c
0000a8740000a88c0000a8a40000a8bc0000a8d40000a8ec0000a9040000
a91c0000a9340000a94c0000a9640000a97c0000a9940000a9ac0000a9c4
0000aa780000aa900000aaa80000aac00000aad80000aaf00000ab080000
ab240000ab400000ab5c0000ab740000abf80000ac240000ac540000ac8c
0000ad200000ad4c0000ada80000addc0000ae440000af540000afa00000
afe40000b03c0000b11c0000b1e80000b2140000b2f40000b30c0000b328
0000b3400000b3580000b3700000b3880000b3a00000b3b80000b3d00000
b3e80000b4780000b5080000b5340000b5900000b6080000b6840000b72c
0000b7c80000b89c0000b9f80000ba640000ba900000baec0000bb040000
bb1c0000bbc40000bc900000bcd80000bd3c0000be380000bf700000bfac
0000c0740000c0d40000c16c0000c3280000c3bc0000c4880000c4f40000
c5980000c6500000c6d40000c8200000c8880000c9700000ca600000caac
0000cb200000cca00000cd100000cd8c0000ce2c0000cee40000cf800000
d07c0000d1840000d2700000d3480000d4700000d5e00000d7580000d908
0000da380000da740000db380000dc240000dcbc0000de280000debc0000
dfa00000e00c0000e0880000e13c0000e1c00000e3040000e36c0000e4c0
0000e5b40000e6000000e6780000e8b80000e9200000e9a00000ea380000
eb280000ebd00000ecc00000edc40000eeb40000ef8c0000f0a40000f1f8
0000f2a80000f3d80000f4380000f4980000f4d40000f5280000f5b00000
f6840000f73c0000f7f00000f8b40000f9fc0000fb400000fc700000fd98
0000fe240000ff8c000100300001011000010184000101f8000103400001
0470000105c40001068400010748000107c000010838000108a40001090c
00010964000109bc00010a1400010a6c00010ab800010aec00010b580001
0bd000010bfc00010c2800010c5400010c8800010cf000010e0000010e34
00010e7800010eb000010f0c00010f6800010ffc00011028000110540001
10e800011114000111400001118000011260000112a0000112f800011354
000113fc000114680001146800011500000115a8000116ac000117480001
185c000118e80001198400011a3000011adc00011b1000011b9400011c44
00011ccc00011d1400011d8c00011e0000011e8800011f1000011ffc0001
207c00012180000122840001235c00012474000125bc000126280001278c
00012834000128840001294400012a0c00012b6000012b9400012bfc0001
2c6800012d1c00012de800012e1800012e4800012e780001301000013078
000130a80001315c000131b4000131e000013260000132a8000132ec0001
334c000133a8000133d40001340800013434000134600001349800013498
000134980001349800013498000134980001349800013498000134980001
349800013498000134980001349800013498000134980001349800013498
000134980001349800013498000134980001349800013498000134980001
3498000134d40001353c00013624000136500001367c000136d00001372c
000137440001379c00013838000139a000013b1400013bc800013c6c0001
3d1000013dc400013f2800013fbc0001400c0001411c000141d4000142a8
000143b00001444c0001455c000145e80001467c000146c0000147200001
47600001478c000147f40001483c00014884000148d00001491c00014990
000149c000014a0800014a3800014a6400014a7c00014a8c00014aa40001
4ab400014acc00014ae000014af800014b0c00014b2400014b3400014b4c
00014b5c00014b7400014b8c00014b9c00014bac00014bc400014be40001
4bfc00014c0c00014c2400014c4400014c6c00014c8400014c9400014cac
00014ccc00014cdc00014cec00014cfc00014d0c00014d1c00014d340001
4d5400014d6c00014d7c00014d9400014db400014ddc00014df400014e04
00014e1c00014e3c00014e4c00014e5c00014e6c00014e7c00014e9c0001
4ebc00014edc00014ef400014f0c00014f2400014f3c00014f5400014f6c
00014f8400014f9c00014fb400014fcc00014fe400014ffc000150140001
502c0001504c0001506c0001508c000150ac000150cc000150ec0001510c
0001512c0001514c0001516c0001518c000151ac000151c4000151dc0001
51f40001520c000152240001523c000152540001526c0001528c000152ac
000152c4000152dc000152f40001530c000153240001533c000153540001
537400015394000153ac000153c4000153dc000153f40001540c00015424
0001543c000154540001546c000154840001549c000154b4000154cc0001
54e4000154fc000155140001552c000155440001555c000155740001558c
000155a4000155bc000155d4000155ec000156040001561c000156340001
564c000156640001567c00015694000156ac000156c4000156e400015704
00015724000157440001575c0001577400015794000157b4000157cc0001
57e4000157f4000158040001581c000158340001584c000158640001587c
00015894000158ac000158c4000158dc000158f40001590c000159240001
593c000159540001596c000159840001599c000159b4000159cc000159e4
00015a0400015a2400015a4400015a6400015a7c00015a9400015aac0001
5ac400015ae400015b0400015b1c00015b3400015b4c00015b6400015b7c
00015b9400015bac00015bc400015bdc00015bf400015c0c00015c240001
5c3c00015c5400015c6c00015c8400015ca400015cc400015cdc00015cf4
00015d0c00015d2400015d3c00015d5400015d6c00015d8400015da40001
5dc400015ddc00015df400015e0c00015e2400015e3c00015e5400015e6c
00015e8400015e9c00015eb400015ecc00015ee400015efc00015f140001
5f2c00015f4400015f5c00015f7400015f9400015fb400015fd400015ff4
000160140001603400016054000160740001608c000160a4000160bc0001
60d4000160ec000161040001611c0001613400016154000161740001618c
000161a4000161bc000161d4000161ec0001620400016224000162440001
626400016284000162a4000162c4000162dc000162f40001630c00016324
0001633c000163540001636c000163840001639c000163b4000163cc0001
63e4000163fc0001641400016434000164540001647400016494000164ac
000164c4000164dc000164f40001650c000165240001653c000165540001
656c000165840001659c000165b4000165cc000165e4000165fc00016614
0001662c000166440001665c000166740001668c000166a4000166bc0001
66d4000166ec000167040001671c000167340001674c0001676400016780
00016798000167b0000167c8000167e00001680000016820000168400001
686000016880000168a0000168c0000168e0000169000001692000016940
0001696000016980000169a0000169c0000169e000016a0000016a200001
6a4000016a6000016a7800016a9000016aa800016ac000016ad800016af0
00016b1000016b3000016b5000016b7000016b9000016bb000016bd00001
6bf000016c1000016c3000016c4800016c6000016c7800016c9000016ca8
00016cc000016cd800016cf000016d1000016d3000016d5000016d700001
6d9000016db000016dd000016df000016e1000016e3000016e4800016e60
00016e7800016e9000016ea800016ec000016ed800016ef000016f080001
6f2000016f3800016f5000016f6800016f8000016f9800016fb000016fc8
00016fe000016ff800017010000170280001704000017058000170700001
7088000170a0000170b8000170d0000170e8000171000001711800017130
000171500001717000017190000171b0000171c8000171e0000171f80001
72100001722800017240000172580001727000017288000172a0000172b8
000172d0000172e800017300000173180001733000017348000173600001
737800017390000173a8000173c0000173d8000173f00001740800017420
0001743800017450000174680001748000017498000174b0000174c80001
74e0000174f0000175000001751800017530000175480001756000017608
0001766c000177e00001781c0001785c000178c0000179080001798c0001
7ae800017b2400017b9000017bdc00017c9400017d1c00017d7400017eb8
00017f200001800800018058000180a40001810800018280000182ec0001
84280001859c0001861c000186b8000187f400018990000189f000018b64
00018c3400018d2c00018dc800018f9400018fd000019048000190940001
914c00019194000192d80001941c000194f4000195ec0001975c000197a8
0001984800019988000199f400019aa800019c3400019cc800019da00001
9dec00019e4800019e7800019f0000019f5800019fb000019fdc0001a00c
0001a0640001a1000001a1a00001a2240001a2a00001a2cc0001a2f80001
a3780001a4180001a4900001a5380001a60c0001a7640001a8e40001a93c
0001a9940001a9ac0001a9c40001a9dc0001a9fc0001aa1c0001aa3c0001
aa5c0001aa7c0001aa940001aaac0001aacc0001aaec0001ab0c0001ab2c
0001ab4c0001ab6c0001ab840001ab9c0001abb40001abd40001abf40001
ac140001ac340001ac4c0001ac640001ac840001aca40001acbc0001acd4
0001acec0001adac0001ae7c0001af340001afd40001b1140001b1500001
b2380001b34c0001b3c40001b43c0001b5840001b6580001b7340001b7ec
0001b8a00001b9380001b9700001b9d00001ba300001bc9c0001bd200001
bd800001bde00001be0c0001be380001be500001be680001be800001be98
0001bec40001bf600001bfc80001c0400001c0b00001c1400001c2140001
c36c0001c4c80001c61c0001c7a00001c8700001c9840001c9e40001cb70
0001cc540001cd2c0001ce6c0001cf500001d07c0001d1d40001d3ec0001
d4e00001d6540001d7b40001d8180001d8d40001d9780001d9d00001da04
0001da300001da600001da8c0001dac00001dae80001db140001db400001
dbfc0001dca00001dce40001dd240001ddc00001de940001df080001df94
0001e02c0001e1040001e1780001e1e40001e2880001e32c0001e36c0001
e3ac0001e3f00001e4340001e4600001e4c80001e5300001e59c0001e654
0001e6b40001e6e40001e7300001e78c0001e7d00001e8140001e8540001
e8940001e9a40001ea480001ea940001ead40001eb140001eb680001ebbc
0001ec200001ec840001ecf40001ed340001ed9c0001ede80001eeb80001
eef80001eef80001eef80001eef80001eef80001eef80001ef880001f094
0001f10c0001f16c0001f1fc0001f2140001f2b40001f3f40001f4880001
f5000001f5780001f5780001f5780001f5780001f5780001f5780001f578
0001f7240001f8380001f8f00001f9b40001fb3c0001fb8c0001fd240001
fe980001ff000001ff3c0001ff7c0002002c000200d800020198000202ac
000202f8000203b4000204e40002059c00020660000207e8000208380002
09d000020b4000020ba800020be400020c2400020cd000020d7c00020de8
00020ee400020f2000020f5c00020fbc0002103c000211a4000212840002
12fc000213f000021460000215380002171800021758000217d4000217ec
000217fc000218f000021a3400021b1c00021c5000021ce400021e240002
1ea000021f2000021fb000022110000221a40002224c000223a800022504
00022560000225c40002270c000227240002273c000227540002276c0002
27840002279c000227b4000227cc000227e4000227fc000228140002282c
000228440002285c0002287800022894000228ac000228c4000228dc0002
28f40002290c000229240002293c000229540002296c000229840002299c
000229b4000229cc000229e4000229fc00022a1400022a2c00022a440002
2a5c00022a7400022a8c00022aa400022abc00022ad400022aec00022b04
00022b1c00022b3400022b4c00022b6400022b7c00022b9400022bac0002
2bc400022bdc00022bf400022c0c00022c2400022c3c00022c5400022c6c
00022c8400022c9c00022cb400022ccc00022ce400022cfc00022d140002
2d2c00022d4400022d5c00022d7400022d8c00022da400022dbc00022dd4
00022dec00022e0400022e1c00022e3400022e4c00022e6400022e7c0002
2e9400022eac00022ec400022edc00022ef400022f0c00022f2400022f3c
00022f5400022f6c00022f8400022f9c00022fb400022fcc00022fe40002
2ffc000230140002302c000230440002305c000230740002308c000230a4
000230bc000230d4000230ec000231040002311c000231340002314c0002
31640002317c00023194000231ac000231c4000231e40002320400023224
000232440002326400023284000232a4000232c4000232e4000233040002
3324000233440002336400023384000233a8000233cc000233ec0002340c
0002342c0002344c0002346c0002348c000234ac000234cc000234ec0002
350c0002352c0002354c0002356c0002358c000235ac000235cc000235ec
0002360c0002362c0002364c0002366c0002368c000236ac000236cc0002
36ec0002370c0002372c0002374c0002376c0002378c000237ac000237cc
000237e4000237fc0002381c00023834000238540002386c0002388c0002
38a4000238bc000238d4000238ec00023904000239240002393c0002395c
0002397400023994000239ac000239c4000239dc000239f400023a0c0002
3a2400023a3c00023a5400023a6c00023a8400023a9c00023ab400023acc
00023ae400023afc00023b1400023b2c00023b4400023b5c00023b740002
3b8c00023ba400023bbc00023bd400023bec00023c0400023c1c00023c34
00023c5400023c6c00023c8c00023ca400023cc400023cdc00023cf40002
3d0c00023d2400023d3c00023d5400023d6c00023d8400023d9c00023db4
00023dcc00023de400023dfc00023e1400023e2c00023e4400023e5c0002
3e7400023e8c00023ea400023ebc00023f9800023fe400024038000240b0
0002412000024138000241580002417800024198000241b8000241d80002
41f80002421800024238000242580002427800024298000242b8000242d8
000242f80002431800024338000243580002437800024398000243b80002
43d8000243f80002441800024438000244580002447800024498000244b8
000244d8000244f800024518000245380002455800024578000245980002
45b8000245d8000245f80002461800024638000246580002467800024698
000246b8000246d8000246f8000247180002473800024758000247780002
4798000247b8000247d0000247e800024800000248180002483000024848
000248600002487800024890000248a8000248c0000248d8000248f00002
49080002492000024938000249500002496800024988000249a0000249b8
000249d0000249e800024a0000024a1800024a3000024a4800024a680002
4a8000024a9800024ab000024ac800024ae000024af800024b1000024b28
00024b4800024b6000024b7800024b9000024ba800024bc000024bd80002
4bf000024c0800024c2800024c4000024c5800024c7000024c8800024ca0
00024cb800024e3800024f20000250a80002510c000251c4000252dc0002
539c000253dc0002547c000254940002557c000256140002582800025a48
00025c1800025e740002615400026358000264cc000265f4000267180002
68000002691400026a5000026b1c00026b9800026c3400026d1400026e28
00026edc00026f880002705800027170000272cc00027424000274f00002
75400002759000027620000276d8000277700002782000027890000278f0
00027a2400027b5400027d8c00028010000280f4000281c4000282580002
82ec0002843c00028580000285e80002865000028718000287e400028884
00028934000289c400028a5c00028abc00028b1c00028b7400028bcc0002
8c8800028d3000028e1000028ed800028f78000290040002909c00029144
00029220000292d8000293f0000294f4000296a800029848000298e00002
999000029a3800029ae000029cd000029e6400029ff80002a17c0002a2e8
0002a4500002a5b40002a6240002a6940002a7240002a7b00002a8940002
a9f40002ab640002ac0c0002acb40002ace80002adc40002ae940002aedc
0002af500002b0a40002b1e00002b2600002b2e40002b3400002b3b00002
b4240002b5000002b5f80002b6f00002b7c80002b8e00002b9980002ba58
0002bb0c0002bb3c0002bb9c0002bbe80002bc340002bc600002bcf40002
bd540002bdbc0002be000002bec40002bf6c0002bff00002c0500002c0f8
0002c1dc0002c2640002c2ec0002c3980002c4380002c5080002c5cc0002
c6c00002c7dc0002c8ac0002c96c0002ca200002cbd00002cca80002cda8
0002cea40002cf880002d0940002d19c0002d2f40002d4a80002d5900002
d6e80002d7b00002d8780002d94c0002da040002da400002da7c0002dab8
0002daf00002db3c0002db780002dbbc0002dc040002dc5c0002dcb40002
dd0c0002dd500002ddb00002de340002df600002e0900002e18c0002e20c
0002e2f00002e4780002e5900002e5d40002e70c0002e84c0002e8880002
e94c0002e9840002e9c00002ea780002eb340002eb7c0002ec500002ed6c
0002ee040002ee9c0002ef080002ef340002ef600002f00c0002f0340002
f0780002f0bc0002f1780002f1c00002f23c0002f2b80002f3180002f36c
0002f3980002f3c40002f51c0002f66c0002f7440002f8140002f91c0002
f9b40002fa200002faac0002fc280002fd380002fd9c0002fde80002fe1c
0002feac00030044000300a4000300f0000301dc000302d0000303bc0003
04b0000306b4000307d4000308f400030a3800030b5800030cec00030d04
00030d1c00030d3400030da000030e3800030e8400030f0000030f680003
1000000310dc000312e40003150000031690000316bc000316e80003171c
000317500003178c000317c800031804000318400003187c000318b80003
18f4000319300003195c00031a3800031a8800031bec00031c8000031d90
00031df000031e8400031fe000032158000322a0000323f00003251c0003
25b8000326bc0003282400032ac400032d0800032e4800032f8800033034
0003320800033380000333dc0003343c00033504000335ec000336b40003
379c000338600003394400033a0800033aec00033b3400033b8000033bcc
00033c1800033c6000033cb000033d0400033d5800033dac00033dfc0003
3e3800033e8400033ed000033f2000033f6000033fb800033ffc00034044
00034088000341c40003436c000343c00003442000034480000344bc0003
44f40003453000034568000345b400034600000346880003477c00034870
00034888000348a00003498800034ab800034be800034d4400034ea40003
4fb000035154000352640003537400035408000354a0000355c0000356a0
000357e400035834000358ac000359b800035a8400035b9400035c700003
5d9400035e3c00035f6800036008000360a00003616c00036270000362b4
0003644c000364ac00036624000366fc000368240003696c00036a900003
6ba800036cc800036db400036f54000370e4000371480003719800037228
000372c0000373040003749c000374fc00037674000376d8000377f40003
7890000378e80003796800037ae400037c0000037db400037f1c00038020
000381c4000382d80003837800038470000384e0000385a8000386000003
86b40003871c000387d800038830000388e000038a2800038a9000038be4
00038d5000038dc000038ee000038f3800038fdc00039150000391e80003
92e00003945c000394b4000396a0000398140003985800039898000398dc
000100000869006a0009006c0008000200100010005c000007e80a240004
000100000031025200010000000000000050000800010000000000010009
005800010000000000020004006100010000000000030024006500010000
00000004000e00890001000000000005000800000001000000000006000e
00970001000000000007003200a50001000000000012000e00d700010000
00000100000900e50001000000000101001000ee0001000000000102000e
00fe00010000000001030014010c00010000000001040012012000010000
00010004000e01320001000000010007002f01400001000000020004000e
016f0001000000020007003c017d0001000000030004001301b900010000
00030007003001cc0001000000040004000d01fc0001000000040007003a
02090001000000050004000d024300010000000500070036025000010000
00060004001102860001000000060007003002970001000000070007003c
02c700010000000800040013030300010000000900040011031600010000
000d00040010032700010004000c0004000e033700010004001f00040010
034500010005000a0004000d035500030001040400020004036200030001
040600020006036600030001040700020008036c00030001040900020008
037400030001040b00020016037c00030001040c00020008039200030001
041000020012039a0003000104110002000803ac00030001041200020006
03b40003000104130002000603ba0003000104140002000603c000030001
04160002000e03c60003000104190002000c03d400030001041d00020006
03e00003000108040002000403e6000300010c0a0002000e03ea362e3164
31386531a920313939302d32303036204170706c6520436f6d7075746572
20496e632e20a92031393831204c696e6f7479706520414720a920313939
302d3931205479706520536f6c7574696f6e7320496e632e48656c766574
696361426f6c6448656c76657469636120426f6c643b20362e3164313865
313b20323030392d30362d323948656c76657469636120426f6c6448656c
7665746963612d426f6c6448656c76657469636120697320612072656769
7374657265642074726164656d61726b206f66204c696e6f747970652041
4748656c76657469636120426f6c644c6967617475726573436f6d6d6f6e
204c69676174757265734e756d6265722053706163696e6750726f706f72
74696f6e616c204e756d626572734d6f6e6f737061636564204e756d6265
727348656c766574696361204772617348656c7665746963612065737420
756e65206d617271756520648e706f738e65206465204c696e6f74797065
20414748656c766574696361204665747448656c76657469636120697374
2065696e2065696e676574726167656e657320576172656e7a6569636865
6e20646572204c696e6f7479706520414748656c76657469636120677261
73736574746f48656c766574696361208f20756e206d61726368696f2072
65676973747261746f206469204c696e6f7479706520414748656c766574
6963612076657448656c7665746963612069732065656e20676572656769
737472656572642068616e64656c736d65726b2076616e204c696e6f7479
706520414748656c7665746963612046657448656c766574696361208a72
2065747420726567697374726572617420766172756d8a726b6520669a72
204c696e6f7479706520414748656c766574696361204e65677269746148
656c76657469636120657320756e61206d61726361207265676973747261
6461206465204c696e6f7479706520414748656c76657469636120657220
657420726567697374726572657420766172656dbe726b652074696c68bf
72656e6465204c696e6f7479706520414748656c76657469636120436172
72656761646f48656c7665746963612048616c7666657448656c76657469
6361206c696861766148656c76657469636120c3d3e8cf48656c76657469
636120c8d1ccd3cae748656c76657469636120f2e1e47c979ad400460065
006400460065007400740042006f006c006400500075006f006c0069006c
006900680061007600610047007200610073004700720061007300730065
00740074006f30dc30fc30eb30c9bcfcb4dcccb400560065007400460065
0074004e00650067007200690074006f041604380440043d044b04390046
006500747c974f53004e0065006700720069007400610000b800522bb800
482bb8003e2bb800342bb8002a2bb10840ba019000145df44009011f0400
0b1fd819eebe012e000d00e6012e000d00b0012e400c0d000963833c1f63
838348294109014b00370401001f014500240401001f0144b224ab1fb801
3eb224231fb8013db224231fb80102b2371d1fb80100400937241ffd3762
1ffc37b80801401b1ff824931ff724931ff6243f1ff524311fd1371d1fd0
37471fcd41b80801b21fcb2ab80201b21fca24b80401400f1fc824811fb5
37291fb4373b1fb227b80401b21fb141b80401b61fa437811fa384b80401
b21fa22ab80401b21fa124b8019ab21fa024b8019ab61f9f243f1f9683b8
0401b21f9527b80401b21f8227b80401b21f7084b80801b21f6fb3b80801
b21f6eb3b802abb61f6d24261f6224b80101400b1f5d246c1f5c24391f54
41b80125b21f4d27b80401b61f4c27cd1f4b41b80401b21f4024b8019ab2
1f3683b80401b21f3524b80201b21f3224b8019ab61f2c24bb1f2884b808
01b21f2241b8040140131f20244c1f1d24261f2ca0961f2c245e1f412ab8
01a8b748282a2448279636b801f4b21f4d27b801f4b21f9527b801f4b21f
6e27b801f4b21f6327bd01a700470029015a00250199b348296fb3b80190
b21f83b3b8019ab348283725b803e840121fb32748278427482736274827
2527482755b80154402c0797076407550733072b072907260721071e071b
071408120810080e080c080a080808060804080208000814b8ffe0402b00
000100140610000001000604000001000410000001001002000001000200
000001000002010802004a00b806008516763f183f123e113946443e1139
46443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b
2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0
324b5358b0ff1d592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b4b5279b35279
eb56456523456023456560234560b08b766818b080622020b1eb79456523
4520b003266062636820b003266165b079236544b0eb234420b152564565
234520b003266062636820b003266165b056236544b0522344b100564554
58b156406544b25240524523614459b35045484e45652345602345656023
4560b089766818b080622020b148454565234520b003266062636820b003
266165b045236544b048234420b1504e4565234520b003266062636820b0
03266165b04e236544b0502344b1004e455458b14e406544b25040504523
6144592b2b456953420000>
[16329 16289 16081 16365 16289 16305 16301 15981 16361 16353 16361 16241 16221
16225 8053 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica-Bold AddT42Char 
1 8068 43 <0001009a0000053d05c2000b0035401c0a2a03030502020b080805082507
1a0d020b2500190c0dc0215279182b2b4ef44dfd3c4e10f64dfd3c003f3c
3f3c392ffd31303311211121112111211121119a013102400132fecefdc0
05c2fdce0232fa3e0292fd6e0000>Helvetica-Bold AddT42Char 
1 8172 44 <00020084000001b605df00030004003040110402020108040617171a0400
2501190506ba014b00210135b179182b2b4ef44dfd394e456544e62f003f
3f3c3130290111212701b6fece01329905c21d00>Helvetica-Bold AddT42Char 
1 8608 47 <0001009c000004aa05c200050029400f000202410508031a070225001906
07b8011cb32152ab182b2b4ef44dfd4e10e6003f4dfd3f31301321112111
219c013402dafbf205c2fb47fef70000>Helvetica-Bold AddT42Char 
1 8684 48 <000100970000062805c2001200c040900900070808090511160819092900
27082b0924112a12370735083c0938126a00651179007511890086119a00
9611a800a611c700f708f8091c05080a09160818090407121a071a0a1712
220023112f123d073f0a3f127a12b909b612c7120e0f070f0a020a0f1211
090800050e070203120a07030e1100020e0803081417171a020403270212
0f0d0e270f19135279182b4e10f44dfd3c1910dcdc18fd3c104e456544e6
003f3c3c3f3c121739011112391217391139313000715d01715d01211121
113436350121011416151121112101046d01bbfee102fee9fed5feeb02fe
e101c0010c05c2fa3e03e52b9b2afb2b04d52a9b2bfc1b05c2fb7900>Helvetica-Bold AddT42Char 
1 10292 55 <00010021000004cb05c200070038400c01062a070204080917171a00b801
58b2022505b80158400906190809c0217572182b2b4ef44df4fdfd4e4565
44e64d003f3ffd3c3130011121112111211104cbfe47fecafe4505c2fefb
fb4304bd0105>Helvetica-Bold AddT42Char 
1 11460 60 <000200230000054205c20008000900a7404cb900b60702290229054a024a
055a025a0566089408a902a905b408c508e308fa080e0b08010518060625
120707080218010125120008000502080406070901040002040808090b17
171a0001b8015eb5090802250705b8015e400906190a0b99217572182b2b
4ef44df439fd3939f4394e456544e64d2f3d2f18003f3f173c1239393901
872e2b047d104b51587a59c51805872e2b047d104b51587a59c531300071
5d015d0121011121110121010303e5015dfe13feccfe02016b01320d05c2
fc68fdd6022a0398fd7e02820000>Helvetica-Bold AddT42Char 
1 12472 68 <0003003bffde0438045f000e0039003a008f404f3b0235367901890104d8
1e0126f3e62ae7230e0d05020005131a2b24232204262e262e2a0d050200
041b0b221b162c3a1f072a0a0b2c320b3a134d004d2e3a352a3e261a3c1a
4d1b2d084d35193b3cbc01190021004801ae00182b2b4ef44dedf4ed4e10
f64de41139cde5e52f003fed3f3f3cfdcd39111217391239390111121739
111217392b3130015d005d010e010f010607061514163332363727363736
35342623220706072136373621321716151114171e011715212e01270607
0623222635343736371302de1b3730405a2742513a5c9b03ad4f223d5d5a
652a1e0afeed0947710113b38b8b02031c1cfeca0d0a033b4d5c7494c19b
55a57002121115090c1017275249416c8fef0a0f1a37433332253f8f5c90
4747c5fe0c344a38280d2a213a25402d35a99bc95a311501d4000000>Helvetica-Bold AddT42Char 
1 13376 72 <0003002fffdc043a045f00060021002200ab4049460887149701990a0406
0109050610051a4b05461049208601850f871f0a03160317131613174808
4c164c17491a5c165c175a1adc01db04e91de720f720104a014610880583
100402b8019540334f0e5f0e6f0e030e0e1b062422210717122c1b0b1603
02220336177b221e600c800c020c1a24021f0e951e1923249821484e182b
2b4ef44dfde44e10f65d4d1139e4ed2f111239003fedcd3f3ced12392f5d
fd313000715d01715d000607212e01233616171617160721161716333237
3637210607062322001110003b0101d06d0e01bb077b5b88da4740130b02
fd1606613b5358371e1701230b5a8cfcd0fec2011fe51403747c6a7175eb
666e61804b8da44229321b3061649f010c012e011b012e000000>Helvetica-Bold AddT42Char 
1 14120 75 <000100870000045e05bd0017003f402505022702580e680e04141712000c
24170710070a0836051a1913102711191819be215045182b2b4ef44dfd3c
4e10f64ded003f3c3fed3f11393130015d0016171e011511211134272623
22061511211121113e01330343a5352d14fedd1e276d7175fee4011c3ea3
5a045e46483d8192fd80029758364c978cfdb205bdfdf75f4b000000>Helvetica-Bold AddT42Char 
1 14268 76 <00020089000001aa05cb00030007003b40224c004c015c005c010401b102
000406070a0917171a0006270107190809b2215045182b2b4ef43c4dfd3c
4e456544e6003f3f3f4ded3130005d012111210121112101aafedf0121fe
df0121fedf04c40107fe77fbbe00>Helvetica-Bold AddT42Char 
1 14808 79 <0001008b000001a805c20003002540130200010a0517171a002701190405
b2215045182b2b4ef44dfd4e456544e6003f3f31302901112101a8fee301
1d05c200>Helvetica-Bold AddT42Char 
1 15208 81 <0002008700000461045f00160017004b402d0501150125013701580b680b
060112100609241716070e040a170536170f021a19110e270f191819be21
5045182b2b4ef44dfdc44e10f64d1139ed2f003f3c3f3ced3f3939313001
5d001615112111342726232207061511211121153637363327038ad7fedc
172a7691361cfee401133731588769045cb1cdfd220297562e547b4165fd
b204409f542542030000>Helvetica-Bold AddT42Char 
1 15368 82 <00030042ffda049c0465000b00170018004d4028170301080c880c881003
170d180f660d0305241814070b240e0b1818080236171a1a08361119191a
b80176b321484e182b2b4ef44ded4e10f64ded11392f003fed3f3ced3130
017200727124363534262322061514163324002120003534002120001501
02eb86867d7d87877d022efeecfee7fee7feec0114011901190114fdd3c9
b2a4a4b1b1a4a4b266feab0155f0ec015afea6ec0240>Helvetica-Bold AddT42Char 
1 15540 83 <0002007dfe53049a045a000d0020004a40291713080a1c1a022420071a06
0a24130b190e080d180d36101a22061f1b1f1827191921229821504e182b
2b4ef44dfdf4e44e10f64ded111239003f3fed3f3fed1139113912393130
002623220706151417163332363512001110002322272627112111211536
373633037473819b3a1e653c52777d1d0109fefdcc82562f2dfee601112e
345f83029fc2934e78be4d2db8990239fee6feeffee0fed2412445fdc805
efa1472949000000>Helvetica-Bold AddT42Char 
2 0 87 <00010015ffea027805680016004ab6102c0f1f0c2c11ba01710004015c40
1607005c0601061817171a0f06f4040927009203151718b8010eb3216066
182b2bd43ce4fd3cf43c4e456544ee4d003f3cfd3ced3ffdf4e431301335
3311211133152311141633323637150706272635111598011ab1b122570d
1d0e87ca4a30036dcb0130fed0cbfdc043210101d505074d3166029f>Helvetica-Bold AddT42Char 
2 148 88 <0002007dffe80455045f0019001a004c402e0a161a162a16381656076507
061a070a0006160e0d0a0524140b1a0d0a271a180b1a1c013618191b1cbe
215045182b2b4ef44ded4e10f612394dfdd42f003fed3f39393f3c3f3130
015d0111141716333237363511211121350e01070e012322272635112501
a116277292361c0121feeb042016437d54f2542f01ec0442fd6f5d2f5376
40690251fbbe9a0532133c2cae60bb02911d>Helvetica-Bold AddT42Char 
2 960 92 <00020015fe470450045f0013001400d94070270a560a660a950aa40ad30a
06050a0106061c07110d2d07200d3d07310d4b075d07580b680b7707790d
0d170f360d8709880b980bb80b0614140c080d02200c0c27120b0b0a0607
021f0808271209090a0607020d0a150c0b0908060709001f022c131f100f
14071617171a0e0d0b0cb8010cb30607090ab8010c400c13920819651516
a9216066182b2b764ef44de418fc393939fc393939194e456544e618003f
3f4de4fde43f3f3c3c3c12393911123901872e2b057d104b52787ac53387
2e182b7d104b52787ac5011112392f3130015d7100715d1f011636373e01
2701211b01210102062322262701b1242a4c1a192b04fe70013deee1012f
fe8a6c7ebd262e2e0182d102020a12116c0c0472fcdc0324fbd0feca9501
03061400>Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/space 3 def
/H 43 def
/I 44 def
/L 47 def
/M 48 def
/T 55 def
/Y 60 def
/a 68 def
/e 72 def
/h 75 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/p 83 def
/t 87 def
/u 88 def
/y 92 def
end
Helvetica-Bold /Encoding get
dup 32 /space put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 84 /T put
dup 89 /Y put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/DNGMYN+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/DNGMYN+Helvetica-Bold*1 [32{/.notdef}rp /space 39{/.notdef}rp /H /I 2{/.notdef}rp /L /M 6{/.notdef}rp /T 4{/.notdef}rp /Y 7{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p 3{/.notdef}rp /t /u 3{/.notdef}rp /y 134{/.notdef}rp]DNGMYN+Helvetica-Bold nfDNGMYN+Helvetica-Bold*1 [16.2 0 0 -16.2 0 0 ]msf94.7 109.9 mo(Yale)[10.8053 9.00719 4.5036 0 ]xsh112.7 174.7 mo(MIT)[13.4945 4.5036 0 ]xsh59.6 268.3 mo(Little Hoop)[9.89808 4.5036 5.39448 5.39448 4.5036 9.00719 4.50359 11.6962 9.89808 9.89807 0 ]xsh236.9 156.7 mo(happy)[9.89807 9.0072 9.89807 9.8981 0 ]xsh234.2 93.7 mo(unhappy)[9.89807 9.89809 9.89807 9.0072 9.89807 9.89807 0 ]xsh236 31.6 mo(happy)[9.89807 9.0072 9.89807 9.89807 0 ]xsh236 279.1 mo(happy)[9.89807 9.0072 9.89807 9.89807 0 ]xsh231.5 346.6 mo(unhappy)[9.89807 9.89809 9.89809 9.00717 9.8981 9.89807 0 ]xsh234.2 220.6 mo(unhappy)[9.89807 9.89809 9.89807 9.0072 9.89807 9.89807 0 ]xshgsave
226.347 50.52 mo
255.162 50.52 li
255.162 38.51 li
226.347 38.51 li
cp
clp
gsave
226.347 50.5187 mo
255.162 50.5187 li
255.162 38.5087 li
226.347 38.5087 li
cp
clp
%ADOBeginSubsetFont: Courier Initial
ct_T42Dict begin
-0.652 -0.406 0.762 1.086
 256 array 0 1 255 {1 index exch /.notdef put} for  /Courier
Type42DictBegin
[<00010000000b000b000b000b63767420f78470aa000000bc000002906670
676d6117704c0000034c0000008d676c79662bcaac5600003acc00021bf4
68656164c5a28bde000003dc000000366868656106ec0414000004140000
0024686d7478502fafe600000438000013e46c6f636105f42a900000181c
000015006d6178700d5a0cef00002d1c000000206e616d65325628320000
2d3c000002f070726570787ac61a0000302c00000a9d6764697200000000
00000000000000000000009800ba005a00c800cd009800a6000a021b0248
007b007d00b40098009c00ac00c5020a019600d5013f01b80093018901c1
0164018900cd009800cd00000014032f0010000c01c1040802ec009800ae
00000089008700cd01e304d900db004a008d00db039a0079033f00000079
00ae015a0342001d007104140000007900a400db00d500000439033b0096
010a01bc01d901db018b00a601c7019c00ac035800f200890089039c03b6
005a0089041900f2033303020098009600cd01a800000079000000790419
0098030201a201dd01ee00b60017016601ae010c00a802980079007701fa
007500960089012d00910091013f0060006204a000750081005800580058
00f000f20098008d01cb007d008d007d00c1034c009600ae018901cd011b
019c00cd00b4017100640308018100fc00fe01fa030e031700910091009e
0087008700930098028301460191021d00df00000089008d0000000004f6
04a204a204a204a20000001f016401ee0075008d002104ee04ee04ee050e
0075021b006204a204a2008d008d0614065601c7022d01b801c700930164
0217028d016d00c3000000190164002104ee030a008d0091024e037f008d
03d1021900bc008d00810081017b04a202a40266008d000c00f2008f0198
025a00000096023b0052007b0614040a039c039c039c039c0000008d0098
008d024805cd053d051d008d0196039c018f039c00be01060019039c007b
009e0396068501fa007701aa0079007d008900890071013f006404a004a2
006f006f0071006f007b00000058006a00f00068006f0308005e00cd016d
00c3021702170064030a018100fc01fa0071030e0321007b057100be0073
02d10073007302d1009302830179007f00df008d000000007fff00980098
008200304007060504030201002c2010b002254964b040515820c859212d
2cb002254964b040515820c859212d2c20100720b00050b00d7920b8ffff
5058041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff50
58041b0559b0051cb0032508e12d2c4b505820b80143454459212d2cb002
254560442d2c4b5358b00225b0022545445921212d2c45442d0000000001
00000001000089d06ee45f0f3cf50111080000000000a381080000000000
c11c3970fac3fcbb061e08b7000000060001000100000000000100000608
fe0800000696fac3fac2061e0001000000000000000000000000000004b3
04cd00660000000004cd000004cd000004cd01ac04cd015804cd000604cd
00c704cd00cd04cd00b404cd020804cd019c04cd019a04cd00d104cd0062
04cd016d04cd009a04cd01a204cd00e704cd00cd04cd010404cd00a204cd
00b604cd00b204cd00ac04cd00cd04cd00cf04cd00cf04cd00c904cd01a2
04cd016d04cd004404cd006604cd004204cd00fa04cd00dd04cdfffe04cd
005404cd004e04cd006204cd004204cd005c04cd004404cd006204cd00be
04cd006d04cd004804cd003904cd000c04cd002104cd004a04cd005804cd
004a04cd003b04cd008f04cd005c04cd003d04cd000e04cd000204cd0056
04cd004c04cd00b604cd019c04cd00c904cd019c04cd010204cdffee04cd
00fe04cd008704cd004404cd006004cd005804cd006604cd00bc04cd0085
04cd006404cd00a604cd00e904cd006804cd00ba04cdfffe04cd006804cd
005a04cd004204cd004e04cd006d04cd00b204cd005804cd004804cd0029
04cdffec04cd005204cd003904cd00c704cd011b04cd022904cd011b04cd
008304cdfffe04cdfffe04cd004e04cd004204cd002104cd004a04cd003d
04cd008704cd008704cd008704cd008704cd008704cd008704cd006004cd
006604cd006604cd006604cd006604cd00a604cd00a604cd00a604cd00a6
04cd006804cd005a04cd005a04cd005a04cd005a04cd005a04cd004804cd
004804cd004804cd004804cd00f60333005804cd00be04cd010204cd009a
04cd012704cd00c104cd002904cd001704cd001704cd007304cd018f04cd
00ee04cdfffe04cd004a05b4009a046400a2046400660464006204cd004c
049c002b069600e90464005c04cd00ee04cd00c10625010e04cd002504cd
006004cd00f204cd01ac04cd006204cd002104e5001b04cd012f04cd012f
04cd003d04cd000004cdfffe04cdfffe04cd004a04cd004404cd004604cd
ffd304cdffd304cd00db04cd00f804cd01ae04cd01b60464003503f40033
04cd003904cd004c04cd007904cd000b04cd01d904cd01d904cdfffc04cd
fffc04cd00f604cd01a604cd019804cd00e904cdffa404cdfffe04cd0042
04cdfffe04cd004204cd004204cd00be04cd00be04cd00be04cd00be04cd
004a04cd004a0652007104cd004a04cd003d04cd003d04cd003d04cd00a6
04cd010e04cd00fc04cd010804cd00e704cd01e704cd016a04cd016a04cd
015804cd01fa04cd010e04cd003904cd00ba04cd008f04cd00b204cd00b6
04cd00c704cd022904cd002904cd005a04cd004c04cd003904cd007104cd
004204cd006204cd00d904cd015004cd012904cd011f04cd007904cd0079
04cd007904cd000004cd004404cd008504cd00be04cd008f04cd00b204cd
004e04cd006004cd004e04cd006004cd005804cdfffe04cd008704cdfffe
04cd008704cdfffe04cd008704cd004e04cd006004cd004e04cd006004cd
006204cd005804cd004204cd006604cd004204cd006604cd004204cd0066
04cd004204cd006604cd004204cd006604cd004404cd008504cd004404cd
008504cd004404cd008504cd008504cd006204cd006404cdffd604cd0019
04cd00be04cd00a604cd00be04cd00a604cd00be04cd00a604cd005f04cd
005304cd006d04cd00e904cd004804cd006804cd003904cd00ba04cd0039
04cd00ba04cd003904cd00ba04cd003904cd00ba04cd002104cd006804cd
001f04cd006804cd002104cd006804cdffdb04cd004a04cd005a04cd004a
04cd005a04cd004a04cd005a04cd003b04cd006d04cd003b04cd006d04cd
003b04cd006d04cd008f04cd00b204cd008f04cd00b204cd005c04cd0058
04cd005c04cd005804cd005c04cd005804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd000204cdffec04cd004c04cd003904cd00b604cd00c704cd
00b604cd00c704cd008f04cd00b204cd005c04cd005804cd00790000fc7c
0000fc7b0000fc430000fc310000fc3e0000fc1c0000fd1c0000fc240000
fc9e0000fc250000fc430000fc990000fcdd0000fc0d04cd002904cd0044
04cd008504cd003904cd00ba04cd004804cd006804cd002104cd003b04cd
006d04cd0068046400330464003303f4001b03f4fff205b400a605b40071
0231feb20231feb20464ff680464ffae0464004d0464005004cd02290000
0000000000000000000004cd004804cdfffe04cd00be04cd00a604cd00e9
04cd01ac04cdfffe04cd008704cd00be04cd00a604cd004a04cd005a04cd
003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd0048
04cd003d04cd004804cdfffe04cd008704cdfffe04cd008704cdfffe04cd
002504cd004404cd008504cd004804cd006804cd004a04cd005a04cd004a
04cd005a04cd00e904cd004404cd002104cd006804cdfffe04cd008704cd
fffe04cd002504cd004a04cd006004cd006204cd006404cdfffe04cd0087
04cd004204cd006604cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd004a04cd005a04cd004c04cd003904cd00f804cd00be04cdfffe
04cd008704cd005404cd004404cd005404cd004404cd005404cd004404cd
004e04cd006004cd006204cd005804cd006204cd005804cd006204cd0058
04cd006204cd005804cd006204cd005804cd004204cd006604cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd005c
04cd00bc04cd004404cd008504cd006204cd006404cd006204cd006404cd
006204cd006404cd006204cd006404cd006204cd006404cd00be04cd00a6
04cd00be04cd00a604cd004804cd006804cd004804cd006804cd004804cd
006804cd003904cd00ba04cd003904cd00ba04cd003904cd00ba04cd0039
04cd00ba04cd000c04cdfffe04cd000c04cdfffe04cd000c04cdfffe04cd
002104cd006804cd002104cd006804cd002104cd006804cd002104cd0068
04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd005804cd004204cd005804cd004204cd003b04cd006d04cd003b
04cd006d04cd003b04cd006d04cd003b04cd006d04cd008f04cd00b204cd
008f04cd00b204cd008f04cd00b204cd008f04cd00b204cd008f04cd00b2
04cd005c04cd005804cd005c04cd005804cd005c04cd005804cd005c04cd
005804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd003d04cd004804cd000e04cd002904cd000e04cd002904cd
000204cdffec04cd000204cdffec04cd000204cdffec04cd000204cdffec
04cd000204cdffec04cd005604cd005204cd005604cd005204cd004c04cd
003904cd00b604cd00c704cd00b604cd00c704cd00b604cd00c704cd0064
04cd005804cdffec04cd003904cdfffe04cd008704cdfffe04cd008704cd
fffe04cd008704cdfffe04cd008704cdfffe04cd008704cdfffe04cd0087
04cdfffe04cd008704cdfffe04cd008704cdfffe04cd008704cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd0042
04cd006604cd004204cd006604cd00be04cd00a604cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd004c04cd003904cd004c04cd003904cd004c04cd
003904cd004204cd006604cd004204cd006604cdfffe04cd002504cd000c
04cdfffe0000fd1c0000fc240000fc9e0000fc430000fc1c0000fc310000
fc3e04cd009a04cd006804cd002104cd006804cd00bc04cd004e04cd0029
04cd004204cd00e704cd00be04cd00ba04cdfeb004cd006804cd004a04cd
004a04cd005a04cd008f04cd00b204cd001804cd00b604cd00c704cd00a2
04cd015604cd006604cd005004cd004804cd004604cd001d04cd005b04cd
007b04cd001704cd005504cd006604cd006604cd005004cd004804cd0046
04cdfffe04cd008704cdfffe04cd008704cd004204cd006604cd004204cd
006604cd00be04cd00a604cd00be04cd00a604cd004a04cd005a04cd004a
04cd005a04cd003b04cd006d04cd003b04cd006d04cd003d04cd004804cd
003d04cd004804cd00b604cd00c704cd005c04cd003604cdfffe04cd004e
04cd003404cd007d04cd008704cd005a04cd005a04cd004604cd006004cd
005804cd005804cd006604cd006604cd004f04cd00bc04cd008504cd0085
04cd006404cd006604cd006604cd006604cd00e704cd00be04cd008304cd
00e704cdfffe04cdfffe04cdfffe04cdfee404cd006804cd005a04cd005a
04cd006d04cd006d04cd006d04cd006d04cd009a04cd00a604cd00a604cd
000004cd000004cd000004cd005804cd005804cd004804cd002904cdffec
04cd003904cd00fa04cd00fa04cd00fa04cd004a04cd006804cd004e04cd
006604cd00ca04cd002804cd003204cd002c04cd003f04cd00b204cd00c4
04cd012d04cd00fc04cd006a04cdffe004cd01ae04cd01b604cd00f304cd
00f404cd017204cd00fa04cd00fa04cd009b04cd00aa04cd00dd04cd01b6
04cd00f804cd01b604cd01e704cd01e704cd015d04cd015d04cd00f404cd
00f404cd010c04cd010c04cd022b04cd010904cd014904cd014704cd022b
04cd010904cd014904cd014704cd01a404cd01a404cd01e704cd01e704cd
00f804cd00f804cd00f804cd011f04cd00da04cd014e04cd012704cd0132
04cd00e704cd015d04cd010c04cd010c04cd010c04cd010c04cd010c04cd
015804cd015804cd010204cd010904cd017004cd017004cd015f04cd015f
04cd016a04cd014704cd00f004cd015804cd00fc04cd01a204cd016004cd
016004cd016004cd016004cd00fc04cd00ca04cd007b0000fb100000fcb5
0000fd5e0000fcc80000fc230000fc1e0000fc1a0000fce10000fce10000
fce10000fce10000fc7e0000fc7d0000fcc30000fcc30000fdc70000fe18
0000fd1a0000fc2b0000fc2b0000fc2b0000fc400000fd7a0000fd7a0000
fd5e0000fc930000fbda0000fc410000fc1a0000fb100000fb100000fc33
0000fc400000fb100000fc0b0000fd1a0000fc930000fc930000fb3d0000
fc800000fd350000fb100000fc7e0000fc7d0000fc330000fce10000fc24
0000fca80000fc930000fc3c0000fcc80000fc930000fc2f0000fc2f0000
fc2f0000fba80000fc84000000000000fc270000fd1a0000fc1a0000fc80
0000fc270000fc270000fad50000fd1a0000fe520000fc7a0000fc010000
fc780000fd020000fd020000faed0000faed0000fd2b0000fd020000fac3
0000fbff0000fc040000fc220000fbf60000fbef0000fc140000fbe50000
fbf70000fba30000fbff0000fbfb0000fbef0000fbea04cd016d04cd01a6
04cd00ef0625010e04cd008704cd00bc04cdfffe04cd008704cdfffe04cd
008704cdfffe04cd008704cd004204cd006604cd004204cd006604cd00be
04cd00a604cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd004c04cd003904cd0000
04cd000004cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd0000000000000000000004cd009a04cd009a04cdffd3
04cdffd304cd015604cdffdd04cd01b604cd00f804cd016204cd01d904cd
003d04cd01c7000000000000000000000000000000000000000000000000
0000000004cd000004cd005e04cd01b604cd00f804cd002c04cd01b604cd
00f804cd002c04cd010204cd005704cd007104cd00fa04cdffdd04cd0006
04cd000604cd009804cdffe604cd009a04cd019c04cd019c04cd001704cd
ffe704cd000f04cd008b04cd00c104cd013c04cd013c04cd00d104cd016d
04cd000604cd00d104cd00d904cd008304cd000604cd006204cd002804cd
009504cd005704cd00ce04cd01d904cd005704cd005504cd01d904cd01d9
04cd00000000000000000000000000000000000000000000000000000000
000000000000000000000000000004cd016904cd014304cd016504cd015d
04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd012904cd
01e904cd01e804cd012204cd016904cd017b04cd016404cd016304cd0165
04cd015d04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd
012904cd01e904cd01e804cd001c04cd001f04cd004e04cd010204cdfffe
04cd005004cd003304cd003c04cd005004cd005804cd003404cd005c04cd
005004cd004404cdfffe04cd006604cd004e04cd002604cd002604cd0062
04cd003004cd003004cd005f04cd006d04cd006d04cd005104cd001704cd
002704cd002404cd006204cd00e704cd009804cd005c04cd008e04cd003b
04cd002304cd00b404cd00be04cd002804cdfffd04cd000e04cd005604cd
003904cd004e04cd006204cd000c04cd00a604cd002e04cdffdb04cd0029
04cd005204cd00ba04cd006004cd005804cdfffe04cdffee04cd004e04cd
000e04cd00d604cd007e04cd007e04cd001104cd005c04cd003d04cd0048
04cd00620000fce604cd00660066fffe0087008700420066004200660042
006600be00a600a60050004a005a004a005a004a005a008f00b2003d0048
0052003b003d006d00480058004400580044ff0a0004003e003e00b3ffc0
ffc0fee800d900d60066fffe00390062004400210044003b004c003b00d1
0062005400580044008500600068005c0058004401a2004400e700e700d1
012501bc022900830083006601f100b200780078ff78ff78022a0202022a
0202ff78ff78022a0202ff78ff78000004cd00e704cd00c904cd019804cd
01c504cd01b604cd01a604cd00e904cd00f604cd00f804cd00e804cd00e7
0125002600d6009a00960043000400900062000f0069009fffae00670067
0087005e0032fffd00000000ff9cffe20081008400620000000000000044
000000440000004400000044000000d000000180000002fc000004980000
05d0000007280000078c00000810000008a8000009f400000a9400000b14
00000b6c00000bac00000c1000000cd800000d8000000ea000000fc40000
1108000011f8000012d00000139c000014bc000015a00000160c000016c0
00001768000017ec000018940000197000001a9c00001bc000001cc80000
1dd400001eac00001fd8000020f40000223400002360000023fc000024d4
00002654000027180000286c0000298400002a2000002af400002c2c0000
2d8c00002f1000003010000031140000320c00003344000034f000003604
0000370400003788000037f00000387800003908000039340000399c0000
3ab400003c1800003d1800003e7c00003fb0000040c800004250000043b4
000044a4000045980000473c000047ec000049d800004b4000004bdc0000
4d5000004ec400004fc0000051cc000052f4000054240000553c000056c0
000058f000005a3c00005bb400005cc400005cf000005e0400005e6c0000
5e840000604800006194000061ac000061c4000061dc000061f40000620c
000062240000623c000062540000626c000064180000655c000065740000
658c000065a4000065bc000065d4000065ec000066040000661c00006634
0000664c000066640000667c00006694000066ac000066c4000066dc0000
66f40000670c000067d400006850000069d800006bb400006d5000006d80
00006e1400006f1c000070e800007234000074b40000751c0000759c0000
770400007828000078e8000079e400007aa800007b7000007d0400007e98
00007fb0000080e000008278000083540000849c000086200000874c0000
8824000088b80000892400008a2800008ab400008bac00008ca000008d4c
00008d4c00008d6400008d7c00008d9400008ebc00008ff4000090640000
90d4000091ec000093040000939c000094340000950000009590000095a8
000095c00000962c00009794000098180000989c00009a9000009c200000
9d3c00009d8400009e1c00009f400000a0c80000a0e00000a0f80000a110
0000a1280000a1400000a1580000a1700000a1880000a1a00000a1b80000
a1d00000a29c0000a2b40000a2cc0000a2e40000a2fc0000a3a40000a430
0000a4c00000a5180000a5800000a5c80000a6440000a6cc0000a7800000
a7e80000a8780000a99c0000aac80000aae00000aaf80000ab100000ab28
0000ab700000ac7c0000ad8c0000ada40000adbc0000aedc0000b0180000
b0680000b1540000b2200000b3240000b4100000b5f80000b8180000ba64
0000bbbc0000bbd40000bbec0000bc040000bdb80000bf4c0000bf640000
bf7c0000bf940000bfac0000c1240000c13c0000c1540000c16c0000c184
0000c19c0000c1b40000c1cc0000c1e40000c1fc0000c2140000c22c0000
c2480000c2600000c2780000c2900000c2a80000c2c00000c2d80000c2f0
0000c3080000c3200000c3380000c3500000c3680000c3800000c3980000
c3b00000c3c80000c3e00000c3f80000c4100000c4280000c4400000c458
0000c4700000c4880000c4a00000c4b80000c4d00000c4f00000c5100000
c5280000c5ac0000c5c40000c5dc0000c5f40000c60c0000c6240000c63c
0000c6580000c6740000c68c0000c6a40000c6bc0000c6d40000c6ec0000
c7040000c71c0000c7340000c7500000c7680000c7800000c7980000c7b0
0000c7c80000c7e00000c7f80000c8100000c8280000c8400000c8580000
c8700000c8880000c8a00000c8b80000c8d00000c8e80000c9000000c918
0000c9340000c94c0000c9640000c97c0000c9940000c9ac0000c9c40000
c9dc0000c9f40000ca0c0000ca240000ca3c0000ca540000ca6c0000ca84
0000ca9c0000cab40000cacc0000cae40000cafc0000cb140000cb2c0000
cb440000cb600000cb7c0000cb980000cbb40000cc480000cc5c0000cc70
0000cc840000cc980000ccac0000ccc00000ccd40000cce80000ccfc0000
cd100000cd240000cd380000cd4c0000cd600000ce6c0000ce880000cea4
0000cec00000cedc0000cef80000cf140000cf300000cf4c0000cf680000
cf840000d0240000d0c40000d1480000d1d00000d26c0000d3040000d380
0000d3fc0000d4700000d4e40000d56c0000d5f40000d6040000d6140000
d6240000d6340000d6440000d6540000d66c0000d6840000d69c0000d6ac
0000d6c40000d6dc0000d6f40000d70c0000d7240000d73c0000d7540000
d76c0000d78c0000d7ac0000d7cc0000d7ec0000d80c0000d82c0000d84c
0000d86c0000d88c0000d8ac0000d8cc0000d8ec0000d9040000d91c0000
d9340000d94c0000d9640000d97c0000d9940000d9ac0000d9cc0000d9e8
0000da000000da180000da300000da480000da680000da880000daa00000
dab80000dad00000dae80000db000000db180000db300000db480000db60
0000db780000db980000dbb80000dbd80000dbf80000dc100000dc280000
dc480000dc680000dc800000dc980000dca80000dcb80000dcd00000dce8
0000dd000000dd180000dd300000dd480000dd600000dd780000dd900000
dda80000ddc00000ddd80000ddf00000de080000de200000de380000de54
0000de700000de880000dea00000dec00000dee00000df000000df200000
df380000df500000df680000df800000dfa00000dfbc0000dfd40000dfec
0000e0040000e01c0000e0340000e04c0000e0640000e07c0000e0940000
e0ac0000e0c40000e0dc0000e0f40000e10c0000e1240000e13c0000e15c
0000e17c0000e1940000e1ac0000e1c40000e1dc0000e1f40000e20c0000
e2240000e23c0000e25c0000e27c0000e2940000e2ac0000e2c40000e2dc
0000e2f40000e30c0000e3240000e33c0000e3540000e36c0000e3840000
e39c0000e3b40000e3cc0000e3e40000e3fc0000e4140000e42c0000e44c
0000e46c0000e48c0000e4ac0000e4cc0000e4ec0000e50c0000e52c0000
e5440000e55c0000e5740000e58c0000e5a40000e5bc0000e5d40000e5ec
0000e60c0000e62c0000e6440000e65c0000e6740000e68c0000e6a40000
e6bc0000e6dc0000e6fc0000e71c0000e73c0000e75c0000e77c0000e794
0000e7ac0000e7c40000e7dc0000e7f40000e80c0000e8240000e83c0000
e8540000e86c0000e8840000e89c0000e8b40000e8cc0000e8ec0000e90c
0000e92c0000e94c0000e9640000e97c0000e9940000e9ac0000e9c40000
e9dc0000e9f40000ea0c0000ea240000ea3c0000ea540000ea6c0000ea84
0000ea9c0000eab40000eacc0000eae40000eafc0000eb140000eb2c0000
eb440000eb5c0000eb740000eb8c0000eba40000ebbc0000ebd40000ebec
0000ec040000ec1c0000ec340000ec4c0000ec6c0000ec8c0000ecac0000
eccc0000ecec0000ed0c0000ed2c0000ed4c0000ed6c0000ed8c0000edac
0000edcc0000edec0000ee0c0000ee2c0000ee4c0000ee640000ee7c0000
ee940000eeac0000eecc0000eeec0000ef0c0000ef2c0000ef4c0000ef6c
0000ef8c0000efac0000efc40000efdc0000eff40000f00c0000f02c0000
f04c0000f06c0000f08c0000f0ac0000f0cc0000f0ec0000f10c0000f124
0000f13c0000f1540000f16c0000f1840000f19c0000f1b40000f1cc0000
f1ec0000f20c0000f22c0000f24c0000f25c0000f26c0000f2840000f29c
0000f2b00000f2c40000f2d80000f2ec0000f3000000f3140000f3280000
f3600000f4100000f4dc0000f5840000f5fc0000f6900000f7380000f7dc
0000f83c0000f8c80000f94c0000fa000000fa9c0000fb100000fbac0000
fc400000fd000000fdb00000fe480000ff040000ffa4000100700001008c
000101000001024c0001037c000104bc000105a8000106880001074c0001
08640001097000010a7c00010af000010bf000010cd400010dc400010eb4
00010fac0001107c00011154000112580001133000011414000114cc0001
159000011648000116ec0001178000011840000118f80001199400011a2c
00011b4400011c2000011d1800011dd400011ec000011fa8000120700001
2138000121cc00012250000123300001241800012504000125f400012688
00012714000127ac0001282c000128ac00012954000129d800012a7c0001
2b2400012b9800012c0c00012ce000012d6800012e1c00012eb800012f54
00013004000130c000013164000131c400013228000132c4000133240001
33f8000134cc000135bc00013660000137100001378000013844000138c0
0001393c000139d000013a4c00013ad000013b4000013bb000013c2c0001
3cd800013d5400013ddc00013e6400013f2000013f9800014048000140d4
00014144000141b400014224000142a00001435000014404000144a00001
453c000146080001472c000148180001491800014a0400014a8c00014bd4
00014ce000014d9000014e5c00014eb400014f0800014fa4000150540001
50d400015150000151cc000152600001531000015398000153ec00015488
000154dc0001552800015574000155e400015654000156bc000157240001
578c000157f40001582c0001583c0001584c0001585c00015894000158a8
000158bc000158d00001594400015984000159d000015a1c00015a640001
5ab000015b1000015b4800015bb800015c3c00015c9000015d4400015df4
00015e6400015e8400015eac00015ed400015efc00015f2000015f440001
5f6c00015fcc0001602c00016090000160f400016158000161bc00016208
0001621c0001628c000162fc0001635c000163a800016404000164600001
64bc00016518000165a4000166000001665800016690000166ec00016724
00016784000167f40001681000016860000168b80001690c000169600001
69b4000169c8000169dc00016a2800016a7400016ad000016b1c00016b68
00016bb400016c0000016c6000016c7400016cc000016d0c00016d440001
6dd000016e5c00016eb800016f0400016f3c00016f9c00016fb000016fc4
00016ffc00017044000170900001711c000171dc00017254000172c40001
73240001738400017398000173ac000173c00001741400017494000174f4
00017580000175e0000176400001769c00017740000177e0000178940001
791c0001797400017974000179dc00017a2800017a9800017b0800017b70
00017bd800017c9400017ce000017cf400017dc400017e5000017f040001
7f5400017fa400017fdc0001801400018078000180c800018120000181b8
000182280001829c000182ec00018374000183f4000184800001851c0001
85ec00018668000186f0000187780001882c0001883c0001884c00018868
00018920000189f400018a0c00018a2400018a3c00018a5c00018a7c0001
8a9c00018abc00018ad400018aec00018b0c00018b2c00018b4400018b5c
00018b7400018b8c00018bac00018bcc00018be400018bfc00018c140001
8c2c00018c4400018c5c00018c7400018c8c00018ca400018cbc00018cd4
00018cec00018ddc00018ed000018fc0000190b8000191c4000192d40001
93e4000194fc000195d8000196bc000196d4000196ec000196ec000196ec
000196ec000196ec000196ec000196ec000196ec000196ec000196ec0001
96ec000196ec000196ec000196ec000197240001975c00019794000197cc
000197e8000198480001989c000199380001998c000199b800019a040001
9a3400019a3400019a3400019a3400019a3400019a3400019a3400019a34
00019a3400019b7800019bcc00019c6800019d4800019d9c00019e380001
9f1c00019f800001a0940001a1400001a1f80001a2300001a2900001a2f0
0001a3200001a5740001a5b00001a6100001a6740001a7840001a8640001
a9440001a9740001a9d00001aa2c0001aa880001ab5c0001abd00001ac80
0001ae180001aea00001aeec0001af4c0001b00c0001b1340001b1a40001
b2340001b3080001b3580001b3e80001b5140001b5840001b6140001b614
0001b6140001b6140001b6140001b6140001b6140001b6140001b6140001
b6140001b6140001b6140001b6640001b6d80001b7800001b7f80001b868
0001b8d40001b9600001b9d00001ba2c0001ba640001babc0001bb1c0001
bb7c0001bc180001bc680001bcd00001bd680001bdf40001be9c0001bf14
0001bf840001bff00001c07c0001c0ec0001c1480001c1800001c1d80001
c2380001c2980001c3ac0001c4f00001c5d80001ca180001cb240001cc40
0001cdd40001cf2c0001d0680001d12c0001d2200001d3080001d4040001
d4e00001d5d00001d6e80001d7b80001d8f80001da6c0001db3c0001dc38
0001dd680001de400001def00001dfcc0001e0d40001e1980001e3040001
e47c0001e5340001e5940001e60c0001e6a40001e7000001e7a00001e94c
0001ea200001ea300001eaa80001eb300001eb400001eb500001eb600001
eb700001eb800001eb900001eba00001ec540001eef80001ef080001ef18
0001ef280001ef380001ef480001ef580001f0080001f09c0001f0f80001
f17c0001f1e40001f24c0001f3140001f3b40001f4700001f5340001f5ec
0001f6400001f6600001f6800001f6a00001f6c00001f6e00001f6f80001
f7100001f7300001f7500001f7700001f7900001f7b00001f7d00001f7e8
0001f9640001f97c0001f9940001f9b40001f9d40001f9f40001fa140001
fa2c0001fa440001fa640001fa840001fa9c0001fab40001facc0001fae4
0001fafc0001fb700001fc180001fc900001fd3c0001fde80001fe800001
fef00001ff600001fff0000200e0000201ec0002020400020220000202a0
00020318000203ec0002046000020514000205b800020658000207180002
07cc0002085c00020910000209c400020a7800020b0800020bc000020c98
00020d7000020e4c00020ee800020fd000021044000210cc000211180002
11a4000211ec00021234000213080002135400021384000213a0000213ec
00021438000214bc00021508000215e000021644000216a8000216c40002
16e0000216fc0002171800021738000217580002177800021798000217b8
000217d8000217f80002181800021834000218440002185c0002186c0002
188400021894000218ac000218bc000218d4000218e4000218fc0002190c
00021924000219340002194c0002195c00021974000219840002199c0002
19ac000219c4000219d4000219ec00021a0000021a1400021a2800021a3c
00021a5000021a6400021a7800021a8c00021aa000021ab400021ac80002
1adc00021af000021b0400021b1800021b2c00021b4000021b5400021b68
00021b7c00021b9000021ba400021bb800021bcc00021be000021bf40001
0000053f01910009007a00050002001000400011000007e80aa100030001
0000001c01560001000000000000005e0007000100000000000100070065
00010000000000020007006c0001000000000003001c0073000100000000
00040007008f000100000000000500070000000100000000000600070096
00010000000001020009009d0001000000000103001000a6000100000000
0104000700b60001000000000105001000bd0001000000000106000f00cd
0003000104040002000600dc0003000104060002000e00e2000300010407
0002000c00f00003000104090002000e00fc00030001040b00020010010a
00030001040c0002000c011a000300010410000200100126000300010411
0002000a0136000300010412000200060140000300010413000200100146
0003000104140002000c01560003000104160002000c0162000300010419
0002000e016e00030001041d0002000c017c000300010804000200060188
000300010c0a0002000c018e362e3164356531436f7079726967687420a9
20313939302d39312062792042697473747265616d20496e632e20436f70
79726967687420a920313939302d32303039206279204170706c6520496e
632e20416c6c207269676874732072657365727665642e436f7572696572
526567756c6172436f75726965723b20362e31643565313b20323030392d
30362d3239436f7572696572436f75726965724c6967617475726573436f
6d6d6f6e204c696761747572657353706163696e6746756c6c79204d6f6e
6f73706163656444656661756c742053706163696e676a196e969ad4004f
007200640069006e00e60072004e006f0072006d0061006c005200650067
0075006c00610072004e006f0072006d00610061006c0069004e006f0072
006d0061006c005200650067006f006c00610072006530ec30ae30e530e9
30fcc77cbc18ccb40052006500670075006c006900650072004e006f0072
006d0061006c004e006f0072006d0061006c041e0431044b0447043d044b
0439004e006f0072006d0061006c5e3889c44f53004e006f0072006d0061
006c41ff02800141001300030140000c0003013e00fe0003013d00fe0003
013a003e0003013900bb0003013800fe0003013700bb00030136005d0003
013500960003013400fe0003013300bb0003013200640003013000fe0003
012d00fe0003012c012400fe0005012a00fe00030129006b000301280035
00030127006b00030126000c0003012500fe0003012400fe000301230096
00030120011f00220005012000fe0003011f00220003011e000c0003011d
011c00530005011d00960003011c00530003011b004c0003011a00530003
011900fe00030118011700fe0005011700fe0003011600c100fe00050114
00fe00030113003500030112004700030111011000fa0005011100fe0003
011000fa0003010f00fe0003010c00fe0003010b00fe0003010a0109001d
00050109001d0003010800f3000a0005010800100003010700d200470005
010700440003010600fe0003010500fe0003010400f3000a0005010400fe
0003010300fe00030102003e00030101002e000301000096000300ff00fe
000e000500ff00fe000300fe00fd0009000500fe000e000300fd00090003
00fc002e000300fb00fe000300fa00f9007d000500fa00fe000300f9007d
000300f80012000300f700f60094000500f700fe000300f700c0000400f6
00f50061000500f60094000300f60080000400f500f4002e000500f50061
000300f541ff0040000400f400f3000a000500f4002e000300f3000a0003
00f00015000300ef00fe000300ee00ed000b000500ee00fe000300ed000b
000300ec00e60017000500ec00fe000300eb00ea000b000500eb00fe0003
00ea000b000300e9001e000300e800a6000300e70039000300e600e50008
000500e60017000300e50008000300e400af000a000500e400fe000300e3
00fe000300e2005d000300e100fe000300e000af000300df00fe000300de
00fe000300db00fe000300da0014000300d900d8007d000500d900fe0003
00d8007d000300d70014000300d600fe000300d500b40041000500d500fe
000300d400fe000300d300d20047000500d30096000300d20047000300d1
00fe000300d000fe000300cf001a000300ce0014000300cd001a000300cc
00fe000300cb00ca0047000500cb00fe000300ca0047000300c900c80014
000500c900fe000300c80014000300c700c60014000500c60014000300c5
006b000300c400bb000300c300c20014000500c30025000300c3ffc00004
00c200af000a000500c20014000300c100fe000300be00bd008c000500be
00fe000300be00c0000400bd00bc0059000500bd008c000300bd00800004
00bc00bb0026000500bc0059000300bc0040000400bb0026000300ba00b4
0041000500ba0032000300b9007d000300b800fe000300b700fe000300b6
001a000300b541ff00b40041000500b500fe000300b5ffd0000400b40041
000300b300b2008c000500b300fe000300b300c0000400b200b100590005
00b2008c000300b20080000400b100b00026000500b10059000300b10040
000400b000af000a000500b00026000300af000a00030145002800030144
0028000300ae00af000300ad00fe000300ac00fe000300ab00fe000300aa
0008000300a800fe000300a700fe000300a600fe000300a400a300fa0005
00a300fa000300a200fa000300a1004b000300a0009f0053000500a000bb
0003009f00530003009e00fe0003009d009c007d0005009c007d0003009a
009900fe0005009900fe0003009800fe00030095007d000300940006003a
00050094004b00030093000c0003009200fe000300910090000b00050090
000b0003008f003e0003008e008d00290005008e002e0003008d00290003
008c00fe0003008b00fe0003008a00fe000300890088003e00050089007d
00030088003e0003008700fe00030086005d00030085006b000300840083
00fe0005008300fe0003008200fe00030081003a0003008000220003007f
007e00460005007f00aa0003007e004600030079005d00030078007d0003
007700fe000300760075003a0005007600fe00030075003a0003007100fe
0003006e00fe0003006d006c000f0005006d00330003006c000f0003006b
00fe0003006a00fe41ff00030069006800100005006900af000300680010
00030067003700030066005a000a00050066004400030065007d00030064
005400100005006400fa000300630062000c0005006300fe00030062000c
000300610060000d00050061002d00030060000d0003005e005d00140005
005d00140003005b005a000a0005005b00fe0003005a000a0003005900fe
000300580054001000050058002900030057001f00090005005700fe0003
0056007d00030055005400100005005500fe0003005400100003005300fe
000300520036000b0005005200fe0003005100290003005000fe0003004e
001a0003004d007d0003004c007d0003004b00380003004a00fe00030049
00640003004800fe0003004700960003004600a60003004500fe00030043
001e000300420036000b00050042007800030041002900030040003e000a
0005004000640003003f003e000a0005003f00960003003e000a0003003d
000a0003003c00fe0003003b00fe0003003a00fe0003003900fe00030038
003700180005003800fa000300370036000b00050037001800030036000b
0003003400960003003300fe0003003200fe0003003100fe0003003000fa
0003002f002c0003002e00fe0003002d00fe0003002c00fe0003002b00fe
0003002a00fa000300290007000300280006003a00050028007d00030027
00bb0003002600fe0003419600250096000300240018001400050024003e
0003002300fe0003002200fe0003002100fe0003002000fe0003001f0009
0003001e000400140005001e00440003001d004a0003001c000400140005
001c00fe0003001b001a00280005001b00fe0003001a0028000300190018
00140005001900fe0003001800140003001700fe0003001600fe00030014
00fe00030013001200080005001200080003001100100029000500100029
0003000f000e004c0005000f00fa0003000e004c0003000d0006003a0005
000d00fe0003000c000b00fe0005000b00fe0003000a0009001600050009
00160003000800fe000300070006003a0005000700bb00030006003a0003
00050004001400050005004b0003000400140003000300fe00030001001a
000300000012000300010118858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d00000000>
[16305 16105 16161 16377 16293 16289 16349 16321 8037 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2988 18 <000100e7ff8f040405980013001e4010030d146600661302130a09000410
061410d4c41739315d0010d4c430050e0123222635343637013e01333216
15140607018516271b1c2a0605027019261b1e2a05051b3224291d08150c
05413425281c08140900>Courier AddT42Char 
1 3288 20 <00010104000003fa050800210041402421100a090005030dbe1f11c4180a
20181215100019091f04200615101d20060f1c011c2210d45dc4d4fcc411
12173911123939123931002fec32fcc4173930010e012322263534363725
3e013332161511333216151406232122263534363b011101770d0d051f27
222001290b150b1316a059302828fdaa28283059a604310202231d182409
500303231efbc61d2824242424281d03d100>Courier AddT42Char 
1 3456 21 <000100a2000003e3050e0033008540632406051d000db97f1401141d2925
c41dbe001e197b0c7a057b08862289049f089b059a049a1b961f9d19a40f
a412aa06aa07aa08aa05aa04ad19a525b908b525bb07bb06bb1bbc04bc05
1c2f2c33302603000624050822250720030a072c202517033410d4c4c0d4
c4ec1112173917391139315d002fecfcc410c65dee111239393930212226
35343f0136370035342623220607060706232226353436373e0133321615
1401060f01213e0133321615140615070e0123010a3533c01d1d37015a7a
613f7323060d252e241e0e1340bd63a6dffeac572e7b01c9042721212602
08031e182b2d41b31c1c340146956b85342c0813432c3e2421133e49d69c
c4febb512e762b2d2c26030f034d1f230000>Courier AddT42Char 
1 4036 23 <000200b2000003ee050c00020038009940638a01ba010201201d1c1a1514
0725182c0f102b040b252100c42f0b3109c418be03281538155602660276
0286029402a602b502092b2838322f22042c2002140c030f061d1c200903
15030600003501352c28061f0a001d0f2801281f30207f0f010f3910d45d
d43ce45dfc3ce410c6325d1112173912393911121739111217391139315d
002feeee32d43cfe3cc612173911121739305d0111090122263534363b01
352122263d0134373637013e01333217161f011e01151133323633321615
14060f010e012b01153332161514062302bafe85010f3022232774fe2d19
1c1d050301a60e120f060f0404660e113316180f141c020308071b1d5423
4030282801cd02a6fd5afe331f292421a8201e45282c080502cc190e0201
0110021b16fd08231e16090f0829241aa81f262424000000>Courier AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>Courier AddT42Char 
Courier /CharStrings get begin
/slash 18 def
/one 20 def
/two 21 def
/four 23 def
end
Courier /Encoding get
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/DNGMYO+Courier /Courier findfont ct_VMDictPut/DNGMYO+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /.notdef /four 203{/.notdef}rp]DNGMYO+Courier nfDNGMYO+Courier*1 [12 0 0 -12 0 0 ]msf226.347 47.5562 mo(4/12)[7.19989 7.19989 7.19989 0 ]xsh/DNGMYN+Helvetica-Bold*1 uf/DNGMYN+Helvetica-Bold uf/Helvetica-Bold uf/DNGMYO+Courier*1 uf/DNGMYO+Courier uf/Courier ufgrestore
grestore
gsave
167.353 163.684 mo
181.753 163.684 li
181.753 151.684 li
167.353 151.684 li
cp
clp
grestore
gsave
164.343 164.888 mo
178.743 164.888 li
178.743 152.888 li
164.343 152.888 li
cp
clp
grestore
gsave
293.168 152.256 mo
321.983 152.256 li
321.983 140.246 li
293.168 140.246 li
cp
clp
gsave
293.168 152.256 mo
321.983 152.256 li
321.983 140.246 li
293.168 140.246 li
cp
clp
%ADOBeginSubsetFont: Courier Initial
ct_T42Dict begin
-0.652 -0.406 0.762 1.086
 256 array 0 1 255 {1 index exch /.notdef put} for  /Courier
Type42DictBegin
[<00010000000b000b000b000b63767420f78470aa000000bc000002906670
676d6117704c0000034c0000008d676c79662bcaac5600003acc00021bf4
68656164c5a28bde000003dc000000366868656106ec0414000004140000
0024686d7478502fafe600000438000013e46c6f636105f42a900000181c
000015006d6178700d5a0cef00002d1c000000206e616d65325628320000
2d3c000002f070726570787ac61a0000302c00000a9d6764697200000000
00000000000000000000009800ba005a00c800cd009800a6000a021b0248
007b007d00b40098009c00ac00c5020a019600d5013f01b80093018901c1
0164018900cd009800cd00000014032f0010000c01c1040802ec009800ae
00000089008700cd01e304d900db004a008d00db039a0079033f00000079
00ae015a0342001d007104140000007900a400db00d500000439033b0096
010a01bc01d901db018b00a601c7019c00ac035800f200890089039c03b6
005a0089041900f2033303020098009600cd01a800000079000000790419
0098030201a201dd01ee00b60017016601ae010c00a802980079007701fa
007500960089012d00910091013f0060006204a000750081005800580058
00f000f20098008d01cb007d008d007d00c1034c009600ae018901cd011b
019c00cd00b4017100640308018100fc00fe01fa030e031700910091009e
0087008700930098028301460191021d00df00000089008d0000000004f6
04a204a204a204a20000001f016401ee0075008d002104ee04ee04ee050e
0075021b006204a204a2008d008d0614065601c7022d01b801c700930164
0217028d016d00c3000000190164002104ee030a008d0091024e037f008d
03d1021900bc008d00810081017b04a202a40266008d000c00f2008f0198
025a00000096023b0052007b0614040a039c039c039c039c0000008d0098
008d024805cd053d051d008d0196039c018f039c00be01060019039c007b
009e0396068501fa007701aa0079007d008900890071013f006404a004a2
006f006f0071006f007b00000058006a00f00068006f0308005e00cd016d
00c3021702170064030a018100fc01fa0071030e0321007b057100be0073
02d10073007302d1009302830179007f00df008d000000007fff00980098
008200304007060504030201002c2010b002254964b040515820c859212d
2cb002254964b040515820c859212d2c20100720b00050b00d7920b8ffff
5058041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff50
58041b0559b0051cb0032508e12d2c4b505820b80143454459212d2cb002
254560442d2c4b5358b00225b0022545445921212d2c45442d0000000001
00000001000089d06ee45f0f3cf50111080000000000a381080000000000
c11c3970fac3fcbb061e08b7000000060001000100000000000100000608
fe0800000696fac3fac2061e0001000000000000000000000000000004b3
04cd00660000000004cd000004cd000004cd01ac04cd015804cd000604cd
00c704cd00cd04cd00b404cd020804cd019c04cd019a04cd00d104cd0062
04cd016d04cd009a04cd01a204cd00e704cd00cd04cd010404cd00a204cd
00b604cd00b204cd00ac04cd00cd04cd00cf04cd00cf04cd00c904cd01a2
04cd016d04cd004404cd006604cd004204cd00fa04cd00dd04cdfffe04cd
005404cd004e04cd006204cd004204cd005c04cd004404cd006204cd00be
04cd006d04cd004804cd003904cd000c04cd002104cd004a04cd005804cd
004a04cd003b04cd008f04cd005c04cd003d04cd000e04cd000204cd0056
04cd004c04cd00b604cd019c04cd00c904cd019c04cd010204cdffee04cd
00fe04cd008704cd004404cd006004cd005804cd006604cd00bc04cd0085
04cd006404cd00a604cd00e904cd006804cd00ba04cdfffe04cd006804cd
005a04cd004204cd004e04cd006d04cd00b204cd005804cd004804cd0029
04cdffec04cd005204cd003904cd00c704cd011b04cd022904cd011b04cd
008304cdfffe04cdfffe04cd004e04cd004204cd002104cd004a04cd003d
04cd008704cd008704cd008704cd008704cd008704cd008704cd006004cd
006604cd006604cd006604cd006604cd00a604cd00a604cd00a604cd00a6
04cd006804cd005a04cd005a04cd005a04cd005a04cd005a04cd004804cd
004804cd004804cd004804cd00f60333005804cd00be04cd010204cd009a
04cd012704cd00c104cd002904cd001704cd001704cd007304cd018f04cd
00ee04cdfffe04cd004a05b4009a046400a2046400660464006204cd004c
049c002b069600e90464005c04cd00ee04cd00c10625010e04cd002504cd
006004cd00f204cd01ac04cd006204cd002104e5001b04cd012f04cd012f
04cd003d04cd000004cdfffe04cdfffe04cd004a04cd004404cd004604cd
ffd304cdffd304cd00db04cd00f804cd01ae04cd01b60464003503f40033
04cd003904cd004c04cd007904cd000b04cd01d904cd01d904cdfffc04cd
fffc04cd00f604cd01a604cd019804cd00e904cdffa404cdfffe04cd0042
04cdfffe04cd004204cd004204cd00be04cd00be04cd00be04cd00be04cd
004a04cd004a0652007104cd004a04cd003d04cd003d04cd003d04cd00a6
04cd010e04cd00fc04cd010804cd00e704cd01e704cd016a04cd016a04cd
015804cd01fa04cd010e04cd003904cd00ba04cd008f04cd00b204cd00b6
04cd00c704cd022904cd002904cd005a04cd004c04cd003904cd007104cd
004204cd006204cd00d904cd015004cd012904cd011f04cd007904cd0079
04cd007904cd000004cd004404cd008504cd00be04cd008f04cd00b204cd
004e04cd006004cd004e04cd006004cd005804cdfffe04cd008704cdfffe
04cd008704cdfffe04cd008704cd004e04cd006004cd004e04cd006004cd
006204cd005804cd004204cd006604cd004204cd006604cd004204cd0066
04cd004204cd006604cd004204cd006604cd004404cd008504cd004404cd
008504cd004404cd008504cd008504cd006204cd006404cdffd604cd0019
04cd00be04cd00a604cd00be04cd00a604cd00be04cd00a604cd005f04cd
005304cd006d04cd00e904cd004804cd006804cd003904cd00ba04cd0039
04cd00ba04cd003904cd00ba04cd003904cd00ba04cd002104cd006804cd
001f04cd006804cd002104cd006804cdffdb04cd004a04cd005a04cd004a
04cd005a04cd004a04cd005a04cd003b04cd006d04cd003b04cd006d04cd
003b04cd006d04cd008f04cd00b204cd008f04cd00b204cd005c04cd0058
04cd005c04cd005804cd005c04cd005804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd000204cdffec04cd004c04cd003904cd00b604cd00c704cd
00b604cd00c704cd008f04cd00b204cd005c04cd005804cd00790000fc7c
0000fc7b0000fc430000fc310000fc3e0000fc1c0000fd1c0000fc240000
fc9e0000fc250000fc430000fc990000fcdd0000fc0d04cd002904cd0044
04cd008504cd003904cd00ba04cd004804cd006804cd002104cd003b04cd
006d04cd0068046400330464003303f4001b03f4fff205b400a605b40071
0231feb20231feb20464ff680464ffae0464004d0464005004cd02290000
0000000000000000000004cd004804cdfffe04cd00be04cd00a604cd00e9
04cd01ac04cdfffe04cd008704cd00be04cd00a604cd004a04cd005a04cd
003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd0048
04cd003d04cd004804cdfffe04cd008704cdfffe04cd008704cdfffe04cd
002504cd004404cd008504cd004804cd006804cd004a04cd005a04cd004a
04cd005a04cd00e904cd004404cd002104cd006804cdfffe04cd008704cd
fffe04cd002504cd004a04cd006004cd006204cd006404cdfffe04cd0087
04cd004204cd006604cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd004a04cd005a04cd004c04cd003904cd00f804cd00be04cdfffe
04cd008704cd005404cd004404cd005404cd004404cd005404cd004404cd
004e04cd006004cd006204cd005804cd006204cd005804cd006204cd0058
04cd006204cd005804cd006204cd005804cd004204cd006604cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd005c
04cd00bc04cd004404cd008504cd006204cd006404cd006204cd006404cd
006204cd006404cd006204cd006404cd006204cd006404cd00be04cd00a6
04cd00be04cd00a604cd004804cd006804cd004804cd006804cd004804cd
006804cd003904cd00ba04cd003904cd00ba04cd003904cd00ba04cd0039
04cd00ba04cd000c04cdfffe04cd000c04cdfffe04cd000c04cdfffe04cd
002104cd006804cd002104cd006804cd002104cd006804cd002104cd0068
04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd005804cd004204cd005804cd004204cd003b04cd006d04cd003b
04cd006d04cd003b04cd006d04cd003b04cd006d04cd008f04cd00b204cd
008f04cd00b204cd008f04cd00b204cd008f04cd00b204cd008f04cd00b2
04cd005c04cd005804cd005c04cd005804cd005c04cd005804cd005c04cd
005804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd003d04cd004804cd000e04cd002904cd000e04cd002904cd
000204cdffec04cd000204cdffec04cd000204cdffec04cd000204cdffec
04cd000204cdffec04cd005604cd005204cd005604cd005204cd004c04cd
003904cd00b604cd00c704cd00b604cd00c704cd00b604cd00c704cd0064
04cd005804cdffec04cd003904cdfffe04cd008704cdfffe04cd008704cd
fffe04cd008704cdfffe04cd008704cdfffe04cd008704cdfffe04cd0087
04cdfffe04cd008704cdfffe04cd008704cdfffe04cd008704cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd0042
04cd006604cd004204cd006604cd00be04cd00a604cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd004c04cd003904cd004c04cd003904cd004c04cd
003904cd004204cd006604cd004204cd006604cdfffe04cd002504cd000c
04cdfffe0000fd1c0000fc240000fc9e0000fc430000fc1c0000fc310000
fc3e04cd009a04cd006804cd002104cd006804cd00bc04cd004e04cd0029
04cd004204cd00e704cd00be04cd00ba04cdfeb004cd006804cd004a04cd
004a04cd005a04cd008f04cd00b204cd001804cd00b604cd00c704cd00a2
04cd015604cd006604cd005004cd004804cd004604cd001d04cd005b04cd
007b04cd001704cd005504cd006604cd006604cd005004cd004804cd0046
04cdfffe04cd008704cdfffe04cd008704cd004204cd006604cd004204cd
006604cd00be04cd00a604cd00be04cd00a604cd004a04cd005a04cd004a
04cd005a04cd003b04cd006d04cd003b04cd006d04cd003d04cd004804cd
003d04cd004804cd00b604cd00c704cd005c04cd003604cdfffe04cd004e
04cd003404cd007d04cd008704cd005a04cd005a04cd004604cd006004cd
005804cd005804cd006604cd006604cd004f04cd00bc04cd008504cd0085
04cd006404cd006604cd006604cd006604cd00e704cd00be04cd008304cd
00e704cdfffe04cdfffe04cdfffe04cdfee404cd006804cd005a04cd005a
04cd006d04cd006d04cd006d04cd006d04cd009a04cd00a604cd00a604cd
000004cd000004cd000004cd005804cd005804cd004804cd002904cdffec
04cd003904cd00fa04cd00fa04cd00fa04cd004a04cd006804cd004e04cd
006604cd00ca04cd002804cd003204cd002c04cd003f04cd00b204cd00c4
04cd012d04cd00fc04cd006a04cdffe004cd01ae04cd01b604cd00f304cd
00f404cd017204cd00fa04cd00fa04cd009b04cd00aa04cd00dd04cd01b6
04cd00f804cd01b604cd01e704cd01e704cd015d04cd015d04cd00f404cd
00f404cd010c04cd010c04cd022b04cd010904cd014904cd014704cd022b
04cd010904cd014904cd014704cd01a404cd01a404cd01e704cd01e704cd
00f804cd00f804cd00f804cd011f04cd00da04cd014e04cd012704cd0132
04cd00e704cd015d04cd010c04cd010c04cd010c04cd010c04cd010c04cd
015804cd015804cd010204cd010904cd017004cd017004cd015f04cd015f
04cd016a04cd014704cd00f004cd015804cd00fc04cd01a204cd016004cd
016004cd016004cd016004cd00fc04cd00ca04cd007b0000fb100000fcb5
0000fd5e0000fcc80000fc230000fc1e0000fc1a0000fce10000fce10000
fce10000fce10000fc7e0000fc7d0000fcc30000fcc30000fdc70000fe18
0000fd1a0000fc2b0000fc2b0000fc2b0000fc400000fd7a0000fd7a0000
fd5e0000fc930000fbda0000fc410000fc1a0000fb100000fb100000fc33
0000fc400000fb100000fc0b0000fd1a0000fc930000fc930000fb3d0000
fc800000fd350000fb100000fc7e0000fc7d0000fc330000fce10000fc24
0000fca80000fc930000fc3c0000fcc80000fc930000fc2f0000fc2f0000
fc2f0000fba80000fc84000000000000fc270000fd1a0000fc1a0000fc80
0000fc270000fc270000fad50000fd1a0000fe520000fc7a0000fc010000
fc780000fd020000fd020000faed0000faed0000fd2b0000fd020000fac3
0000fbff0000fc040000fc220000fbf60000fbef0000fc140000fbe50000
fbf70000fba30000fbff0000fbfb0000fbef0000fbea04cd016d04cd01a6
04cd00ef0625010e04cd008704cd00bc04cdfffe04cd008704cdfffe04cd
008704cdfffe04cd008704cd004204cd006604cd004204cd006604cd00be
04cd00a604cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd004c04cd003904cd0000
04cd000004cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd0000000000000000000004cd009a04cd009a04cdffd3
04cdffd304cd015604cdffdd04cd01b604cd00f804cd016204cd01d904cd
003d04cd01c7000000000000000000000000000000000000000000000000
0000000004cd000004cd005e04cd01b604cd00f804cd002c04cd01b604cd
00f804cd002c04cd010204cd005704cd007104cd00fa04cdffdd04cd0006
04cd000604cd009804cdffe604cd009a04cd019c04cd019c04cd001704cd
ffe704cd000f04cd008b04cd00c104cd013c04cd013c04cd00d104cd016d
04cd000604cd00d104cd00d904cd008304cd000604cd006204cd002804cd
009504cd005704cd00ce04cd01d904cd005704cd005504cd01d904cd01d9
04cd00000000000000000000000000000000000000000000000000000000
000000000000000000000000000004cd016904cd014304cd016504cd015d
04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd012904cd
01e904cd01e804cd012204cd016904cd017b04cd016404cd016304cd0165
04cd015d04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd
012904cd01e904cd01e804cd001c04cd001f04cd004e04cd010204cdfffe
04cd005004cd003304cd003c04cd005004cd005804cd003404cd005c04cd
005004cd004404cdfffe04cd006604cd004e04cd002604cd002604cd0062
04cd003004cd003004cd005f04cd006d04cd006d04cd005104cd001704cd
002704cd002404cd006204cd00e704cd009804cd005c04cd008e04cd003b
04cd002304cd00b404cd00be04cd002804cdfffd04cd000e04cd005604cd
003904cd004e04cd006204cd000c04cd00a604cd002e04cdffdb04cd0029
04cd005204cd00ba04cd006004cd005804cdfffe04cdffee04cd004e04cd
000e04cd00d604cd007e04cd007e04cd001104cd005c04cd003d04cd0048
04cd00620000fce604cd00660066fffe0087008700420066004200660042
006600be00a600a60050004a005a004a005a004a005a008f00b2003d0048
0052003b003d006d00480058004400580044ff0a0004003e003e00b3ffc0
ffc0fee800d900d60066fffe00390062004400210044003b004c003b00d1
0062005400580044008500600068005c0058004401a2004400e700e700d1
012501bc022900830083006601f100b200780078ff78ff78022a0202022a
0202ff78ff78022a0202ff78ff78000004cd00e704cd00c904cd019804cd
01c504cd01b604cd01a604cd00e904cd00f604cd00f804cd00e804cd00e7
0125002600d6009a00960043000400900062000f0069009fffae00670067
0087005e0032fffd00000000ff9cffe20081008400620000000000000044
000000440000004400000044000000d000000180000002fc000004980000
05d0000007280000078c00000810000008a8000009f400000a9400000b14
00000b6c00000bac00000c1000000cd800000d8000000ea000000fc40000
1108000011f8000012d00000139c000014bc000015a00000160c000016c0
00001768000017ec000018940000197000001a9c00001bc000001cc80000
1dd400001eac00001fd8000020f40000223400002360000023fc000024d4
00002654000027180000286c0000298400002a2000002af400002c2c0000
2d8c00002f1000003010000031140000320c00003344000034f000003604
0000370400003788000037f00000387800003908000039340000399c0000
3ab400003c1800003d1800003e7c00003fb0000040c800004250000043b4
000044a4000045980000473c000047ec000049d800004b4000004bdc0000
4d5000004ec400004fc0000051cc000052f4000054240000553c000056c0
000058f000005a3c00005bb400005cc400005cf000005e0400005e6c0000
5e840000604800006194000061ac000061c4000061dc000061f40000620c
000062240000623c000062540000626c000064180000655c000065740000
658c000065a4000065bc000065d4000065ec000066040000661c00006634
0000664c000066640000667c00006694000066ac000066c4000066dc0000
66f40000670c000067d400006850000069d800006bb400006d5000006d80
00006e1400006f1c000070e800007234000074b40000751c0000759c0000
770400007828000078e8000079e400007aa800007b7000007d0400007e98
00007fb0000080e000008278000083540000849c000086200000874c0000
8824000088b80000892400008a2800008ab400008bac00008ca000008d4c
00008d4c00008d6400008d7c00008d9400008ebc00008ff4000090640000
90d4000091ec000093040000939c000094340000950000009590000095a8
000095c00000962c00009794000098180000989c00009a9000009c200000
9d3c00009d8400009e1c00009f400000a0c80000a0e00000a0f80000a110
0000a1280000a1400000a1580000a1700000a1880000a1a00000a1b80000
a1d00000a29c0000a2b40000a2cc0000a2e40000a2fc0000a3a40000a430
0000a4c00000a5180000a5800000a5c80000a6440000a6cc0000a7800000
a7e80000a8780000a99c0000aac80000aae00000aaf80000ab100000ab28
0000ab700000ac7c0000ad8c0000ada40000adbc0000aedc0000b0180000
b0680000b1540000b2200000b3240000b4100000b5f80000b8180000ba64
0000bbbc0000bbd40000bbec0000bc040000bdb80000bf4c0000bf640000
bf7c0000bf940000bfac0000c1240000c13c0000c1540000c16c0000c184
0000c19c0000c1b40000c1cc0000c1e40000c1fc0000c2140000c22c0000
c2480000c2600000c2780000c2900000c2a80000c2c00000c2d80000c2f0
0000c3080000c3200000c3380000c3500000c3680000c3800000c3980000
c3b00000c3c80000c3e00000c3f80000c4100000c4280000c4400000c458
0000c4700000c4880000c4a00000c4b80000c4d00000c4f00000c5100000
c5280000c5ac0000c5c40000c5dc0000c5f40000c60c0000c6240000c63c
0000c6580000c6740000c68c0000c6a40000c6bc0000c6d40000c6ec0000
c7040000c71c0000c7340000c7500000c7680000c7800000c7980000c7b0
0000c7c80000c7e00000c7f80000c8100000c8280000c8400000c8580000
c8700000c8880000c8a00000c8b80000c8d00000c8e80000c9000000c918
0000c9340000c94c0000c9640000c97c0000c9940000c9ac0000c9c40000
c9dc0000c9f40000ca0c0000ca240000ca3c0000ca540000ca6c0000ca84
0000ca9c0000cab40000cacc0000cae40000cafc0000cb140000cb2c0000
cb440000cb600000cb7c0000cb980000cbb40000cc480000cc5c0000cc70
0000cc840000cc980000ccac0000ccc00000ccd40000cce80000ccfc0000
cd100000cd240000cd380000cd4c0000cd600000ce6c0000ce880000cea4
0000cec00000cedc0000cef80000cf140000cf300000cf4c0000cf680000
cf840000d0240000d0c40000d1480000d1d00000d26c0000d3040000d380
0000d3fc0000d4700000d4e40000d56c0000d5f40000d6040000d6140000
d6240000d6340000d6440000d6540000d66c0000d6840000d69c0000d6ac
0000d6c40000d6dc0000d6f40000d70c0000d7240000d73c0000d7540000
d76c0000d78c0000d7ac0000d7cc0000d7ec0000d80c0000d82c0000d84c
0000d86c0000d88c0000d8ac0000d8cc0000d8ec0000d9040000d91c0000
d9340000d94c0000d9640000d97c0000d9940000d9ac0000d9cc0000d9e8
0000da000000da180000da300000da480000da680000da880000daa00000
dab80000dad00000dae80000db000000db180000db300000db480000db60
0000db780000db980000dbb80000dbd80000dbf80000dc100000dc280000
dc480000dc680000dc800000dc980000dca80000dcb80000dcd00000dce8
0000dd000000dd180000dd300000dd480000dd600000dd780000dd900000
dda80000ddc00000ddd80000ddf00000de080000de200000de380000de54
0000de700000de880000dea00000dec00000dee00000df000000df200000
df380000df500000df680000df800000dfa00000dfbc0000dfd40000dfec
0000e0040000e01c0000e0340000e04c0000e0640000e07c0000e0940000
e0ac0000e0c40000e0dc0000e0f40000e10c0000e1240000e13c0000e15c
0000e17c0000e1940000e1ac0000e1c40000e1dc0000e1f40000e20c0000
e2240000e23c0000e25c0000e27c0000e2940000e2ac0000e2c40000e2dc
0000e2f40000e30c0000e3240000e33c0000e3540000e36c0000e3840000
e39c0000e3b40000e3cc0000e3e40000e3fc0000e4140000e42c0000e44c
0000e46c0000e48c0000e4ac0000e4cc0000e4ec0000e50c0000e52c0000
e5440000e55c0000e5740000e58c0000e5a40000e5bc0000e5d40000e5ec
0000e60c0000e62c0000e6440000e65c0000e6740000e68c0000e6a40000
e6bc0000e6dc0000e6fc0000e71c0000e73c0000e75c0000e77c0000e794
0000e7ac0000e7c40000e7dc0000e7f40000e80c0000e8240000e83c0000
e8540000e86c0000e8840000e89c0000e8b40000e8cc0000e8ec0000e90c
0000e92c0000e94c0000e9640000e97c0000e9940000e9ac0000e9c40000
e9dc0000e9f40000ea0c0000ea240000ea3c0000ea540000ea6c0000ea84
0000ea9c0000eab40000eacc0000eae40000eafc0000eb140000eb2c0000
eb440000eb5c0000eb740000eb8c0000eba40000ebbc0000ebd40000ebec
0000ec040000ec1c0000ec340000ec4c0000ec6c0000ec8c0000ecac0000
eccc0000ecec0000ed0c0000ed2c0000ed4c0000ed6c0000ed8c0000edac
0000edcc0000edec0000ee0c0000ee2c0000ee4c0000ee640000ee7c0000
ee940000eeac0000eecc0000eeec0000ef0c0000ef2c0000ef4c0000ef6c
0000ef8c0000efac0000efc40000efdc0000eff40000f00c0000f02c0000
f04c0000f06c0000f08c0000f0ac0000f0cc0000f0ec0000f10c0000f124
0000f13c0000f1540000f16c0000f1840000f19c0000f1b40000f1cc0000
f1ec0000f20c0000f22c0000f24c0000f25c0000f26c0000f2840000f29c
0000f2b00000f2c40000f2d80000f2ec0000f3000000f3140000f3280000
f3600000f4100000f4dc0000f5840000f5fc0000f6900000f7380000f7dc
0000f83c0000f8c80000f94c0000fa000000fa9c0000fb100000fbac0000
fc400000fd000000fdb00000fe480000ff040000ffa4000100700001008c
000101000001024c0001037c000104bc000105a8000106880001074c0001
08640001097000010a7c00010af000010bf000010cd400010dc400010eb4
00010fac0001107c00011154000112580001133000011414000114cc0001
159000011648000116ec0001178000011840000118f80001199400011a2c
00011b4400011c2000011d1800011dd400011ec000011fa8000120700001
2138000121cc00012250000123300001241800012504000125f400012688
00012714000127ac0001282c000128ac00012954000129d800012a7c0001
2b2400012b9800012c0c00012ce000012d6800012e1c00012eb800012f54
00013004000130c000013164000131c400013228000132c4000133240001
33f8000134cc000135bc00013660000137100001378000013844000138c0
0001393c000139d000013a4c00013ad000013b4000013bb000013c2c0001
3cd800013d5400013ddc00013e6400013f2000013f9800014048000140d4
00014144000141b400014224000142a00001435000014404000144a00001
453c000146080001472c000148180001491800014a0400014a8c00014bd4
00014ce000014d9000014e5c00014eb400014f0800014fa4000150540001
50d400015150000151cc000152600001531000015398000153ec00015488
000154dc0001552800015574000155e400015654000156bc000157240001
578c000157f40001582c0001583c0001584c0001585c00015894000158a8
000158bc000158d00001594400015984000159d000015a1c00015a640001
5ab000015b1000015b4800015bb800015c3c00015c9000015d4400015df4
00015e6400015e8400015eac00015ed400015efc00015f2000015f440001
5f6c00015fcc0001602c00016090000160f400016158000161bc00016208
0001621c0001628c000162fc0001635c000163a800016404000164600001
64bc00016518000165a4000166000001665800016690000166ec00016724
00016784000167f40001681000016860000168b80001690c000169600001
69b4000169c8000169dc00016a2800016a7400016ad000016b1c00016b68
00016bb400016c0000016c6000016c7400016cc000016d0c00016d440001
6dd000016e5c00016eb800016f0400016f3c00016f9c00016fb000016fc4
00016ffc00017044000170900001711c000171dc00017254000172c40001
73240001738400017398000173ac000173c00001741400017494000174f4
00017580000175e0000176400001769c00017740000177e0000178940001
791c0001797400017974000179dc00017a2800017a9800017b0800017b70
00017bd800017c9400017ce000017cf400017dc400017e5000017f040001
7f5400017fa400017fdc0001801400018078000180c800018120000181b8
000182280001829c000182ec00018374000183f4000184800001851c0001
85ec00018668000186f0000187780001882c0001883c0001884c00018868
00018920000189f400018a0c00018a2400018a3c00018a5c00018a7c0001
8a9c00018abc00018ad400018aec00018b0c00018b2c00018b4400018b5c
00018b7400018b8c00018bac00018bcc00018be400018bfc00018c140001
8c2c00018c4400018c5c00018c7400018c8c00018ca400018cbc00018cd4
00018cec00018ddc00018ed000018fc0000190b8000191c4000192d40001
93e4000194fc000195d8000196bc000196d4000196ec000196ec000196ec
000196ec000196ec000196ec000196ec000196ec000196ec000196ec0001
96ec000196ec000196ec000196ec000197240001975c00019794000197cc
000197e8000198480001989c000199380001998c000199b800019a040001
9a3400019a3400019a3400019a3400019a3400019a3400019a3400019a34
00019a3400019b7800019bcc00019c6800019d4800019d9c00019e380001
9f1c00019f800001a0940001a1400001a1f80001a2300001a2900001a2f0
0001a3200001a5740001a5b00001a6100001a6740001a7840001a8640001
a9440001a9740001a9d00001aa2c0001aa880001ab5c0001abd00001ac80
0001ae180001aea00001aeec0001af4c0001b00c0001b1340001b1a40001
b2340001b3080001b3580001b3e80001b5140001b5840001b6140001b614
0001b6140001b6140001b6140001b6140001b6140001b6140001b6140001
b6140001b6140001b6140001b6640001b6d80001b7800001b7f80001b868
0001b8d40001b9600001b9d00001ba2c0001ba640001babc0001bb1c0001
bb7c0001bc180001bc680001bcd00001bd680001bdf40001be9c0001bf14
0001bf840001bff00001c07c0001c0ec0001c1480001c1800001c1d80001
c2380001c2980001c3ac0001c4f00001c5d80001ca180001cb240001cc40
0001cdd40001cf2c0001d0680001d12c0001d2200001d3080001d4040001
d4e00001d5d00001d6e80001d7b80001d8f80001da6c0001db3c0001dc38
0001dd680001de400001def00001dfcc0001e0d40001e1980001e3040001
e47c0001e5340001e5940001e60c0001e6a40001e7000001e7a00001e94c
0001ea200001ea300001eaa80001eb300001eb400001eb500001eb600001
eb700001eb800001eb900001eba00001ec540001eef80001ef080001ef18
0001ef280001ef380001ef480001ef580001f0080001f09c0001f0f80001
f17c0001f1e40001f24c0001f3140001f3b40001f4700001f5340001f5ec
0001f6400001f6600001f6800001f6a00001f6c00001f6e00001f6f80001
f7100001f7300001f7500001f7700001f7900001f7b00001f7d00001f7e8
0001f9640001f97c0001f9940001f9b40001f9d40001f9f40001fa140001
fa2c0001fa440001fa640001fa840001fa9c0001fab40001facc0001fae4
0001fafc0001fb700001fc180001fc900001fd3c0001fde80001fe800001
fef00001ff600001fff0000200e0000201ec0002020400020220000202a0
00020318000203ec0002046000020514000205b800020658000207180002
07cc0002085c00020910000209c400020a7800020b0800020bc000020c98
00020d7000020e4c00020ee800020fd000021044000210cc000211180002
11a4000211ec00021234000213080002135400021384000213a0000213ec
00021438000214bc00021508000215e000021644000216a8000216c40002
16e0000216fc0002171800021738000217580002177800021798000217b8
000217d8000217f80002181800021834000218440002185c0002186c0002
188400021894000218ac000218bc000218d4000218e4000218fc0002190c
00021924000219340002194c0002195c00021974000219840002199c0002
19ac000219c4000219d4000219ec00021a0000021a1400021a2800021a3c
00021a5000021a6400021a7800021a8c00021aa000021ab400021ac80002
1adc00021af000021b0400021b1800021b2c00021b4000021b5400021b68
00021b7c00021b9000021ba400021bb800021bcc00021be000021bf40001
0000053f01910009007a00050002001000400011000007e80aa100030001
0000001c01560001000000000000005e0007000100000000000100070065
00010000000000020007006c0001000000000003001c0073000100000000
00040007008f000100000000000500070000000100000000000600070096
00010000000001020009009d0001000000000103001000a6000100000000
0104000700b60001000000000105001000bd0001000000000106000f00cd
0003000104040002000600dc0003000104060002000e00e2000300010407
0002000c00f00003000104090002000e00fc00030001040b00020010010a
00030001040c0002000c011a000300010410000200100126000300010411
0002000a0136000300010412000200060140000300010413000200100146
0003000104140002000c01560003000104160002000c0162000300010419
0002000e016e00030001041d0002000c017c000300010804000200060188
000300010c0a0002000c018e362e3164356531436f7079726967687420a9
20313939302d39312062792042697473747265616d20496e632e20436f70
79726967687420a920313939302d32303039206279204170706c6520496e
632e20416c6c207269676874732072657365727665642e436f7572696572
526567756c6172436f75726965723b20362e31643565313b20323030392d
30362d3239436f7572696572436f75726965724c6967617475726573436f
6d6d6f6e204c696761747572657353706163696e6746756c6c79204d6f6e
6f73706163656444656661756c742053706163696e676a196e969ad4004f
007200640069006e00e60072004e006f0072006d0061006c005200650067
0075006c00610072004e006f0072006d00610061006c0069004e006f0072
006d0061006c005200650067006f006c00610072006530ec30ae30e530e9
30fcc77cbc18ccb40052006500670075006c006900650072004e006f0072
006d0061006c004e006f0072006d0061006c041e0431044b0447043d044b
0439004e006f0072006d0061006c5e3889c44f53004e006f0072006d0061
006c41ff02800141001300030140000c0003013e00fe0003013d00fe0003
013a003e0003013900bb0003013800fe0003013700bb00030136005d0003
013500960003013400fe0003013300bb0003013200640003013000fe0003
012d00fe0003012c012400fe0005012a00fe00030129006b000301280035
00030127006b00030126000c0003012500fe0003012400fe000301230096
00030120011f00220005012000fe0003011f00220003011e000c0003011d
011c00530005011d00960003011c00530003011b004c0003011a00530003
011900fe00030118011700fe0005011700fe0003011600c100fe00050114
00fe00030113003500030112004700030111011000fa0005011100fe0003
011000fa0003010f00fe0003010c00fe0003010b00fe0003010a0109001d
00050109001d0003010800f3000a0005010800100003010700d200470005
010700440003010600fe0003010500fe0003010400f3000a0005010400fe
0003010300fe00030102003e00030101002e000301000096000300ff00fe
000e000500ff00fe000300fe00fd0009000500fe000e000300fd00090003
00fc002e000300fb00fe000300fa00f9007d000500fa00fe000300f9007d
000300f80012000300f700f60094000500f700fe000300f700c0000400f6
00f50061000500f60094000300f60080000400f500f4002e000500f50061
000300f541ff0040000400f400f3000a000500f4002e000300f3000a0003
00f00015000300ef00fe000300ee00ed000b000500ee00fe000300ed000b
000300ec00e60017000500ec00fe000300eb00ea000b000500eb00fe0003
00ea000b000300e9001e000300e800a6000300e70039000300e600e50008
000500e60017000300e50008000300e400af000a000500e400fe000300e3
00fe000300e2005d000300e100fe000300e000af000300df00fe000300de
00fe000300db00fe000300da0014000300d900d8007d000500d900fe0003
00d8007d000300d70014000300d600fe000300d500b40041000500d500fe
000300d400fe000300d300d20047000500d30096000300d20047000300d1
00fe000300d000fe000300cf001a000300ce0014000300cd001a000300cc
00fe000300cb00ca0047000500cb00fe000300ca0047000300c900c80014
000500c900fe000300c80014000300c700c60014000500c60014000300c5
006b000300c400bb000300c300c20014000500c30025000300c3ffc00004
00c200af000a000500c20014000300c100fe000300be00bd008c000500be
00fe000300be00c0000400bd00bc0059000500bd008c000300bd00800004
00bc00bb0026000500bc0059000300bc0040000400bb0026000300ba00b4
0041000500ba0032000300b9007d000300b800fe000300b700fe000300b6
001a000300b541ff00b40041000500b500fe000300b5ffd0000400b40041
000300b300b2008c000500b300fe000300b300c0000400b200b100590005
00b2008c000300b20080000400b100b00026000500b10059000300b10040
000400b000af000a000500b00026000300af000a00030145002800030144
0028000300ae00af000300ad00fe000300ac00fe000300ab00fe000300aa
0008000300a800fe000300a700fe000300a600fe000300a400a300fa0005
00a300fa000300a200fa000300a1004b000300a0009f0053000500a000bb
0003009f00530003009e00fe0003009d009c007d0005009c007d0003009a
009900fe0005009900fe0003009800fe00030095007d000300940006003a
00050094004b00030093000c0003009200fe000300910090000b00050090
000b0003008f003e0003008e008d00290005008e002e0003008d00290003
008c00fe0003008b00fe0003008a00fe000300890088003e00050089007d
00030088003e0003008700fe00030086005d00030085006b000300840083
00fe0005008300fe0003008200fe00030081003a0003008000220003007f
007e00460005007f00aa0003007e004600030079005d00030078007d0003
007700fe000300760075003a0005007600fe00030075003a0003007100fe
0003006e00fe0003006d006c000f0005006d00330003006c000f0003006b
00fe0003006a00fe41ff00030069006800100005006900af000300680010
00030067003700030066005a000a00050066004400030065007d00030064
005400100005006400fa000300630062000c0005006300fe00030062000c
000300610060000d00050061002d00030060000d0003005e005d00140005
005d00140003005b005a000a0005005b00fe0003005a000a0003005900fe
000300580054001000050058002900030057001f00090005005700fe0003
0056007d00030055005400100005005500fe0003005400100003005300fe
000300520036000b0005005200fe0003005100290003005000fe0003004e
001a0003004d007d0003004c007d0003004b00380003004a00fe00030049
00640003004800fe0003004700960003004600a60003004500fe00030043
001e000300420036000b00050042007800030041002900030040003e000a
0005004000640003003f003e000a0005003f00960003003e000a0003003d
000a0003003c00fe0003003b00fe0003003a00fe0003003900fe00030038
003700180005003800fa000300370036000b00050037001800030036000b
0003003400960003003300fe0003003200fe0003003100fe0003003000fa
0003002f002c0003002e00fe0003002d00fe0003002c00fe0003002b00fe
0003002a00fa000300290007000300280006003a00050028007d00030027
00bb0003002600fe0003419600250096000300240018001400050024003e
0003002300fe0003002200fe0003002100fe0003002000fe0003001f0009
0003001e000400140005001e00440003001d004a0003001c000400140005
001c00fe0003001b001a00280005001b00fe0003001a0028000300190018
00140005001900fe0003001800140003001700fe0003001600fe00030014
00fe00030013001200080005001200080003001100100029000500100029
0003000f000e004c0005000f00fa0003000e004c0003000d0006003a0005
000d00fe0003000c000b00fe0005000b00fe0003000a0009001600050009
00160003000800fe000300070006003a0005000700bb00030006003a0003
00050004001400050005004b0003000400140003000300fe00030001001a
000300000012000300010118858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d00000000>
[16305 16105 16161 16377 16293 16289 16349 16321 8037 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2988 18 <000100e7ff8f040405980013001e4010030d146600661302130a09000410
061410d4c41739315d0010d4c430050e0123222635343637013e01333216
15140607018516271b1c2a0605027019261b1e2a05051b3224291d08150c
05413425281c08140900>Courier AddT42Char 
1 3288 20 <00010104000003fa050800210041402421100a090005030dbe1f11c4180a
20181215100019091f04200615101d20060f1c011c2210d45dc4d4fcc411
12173911123939123931002fec32fcc4173930010e012322263534363725
3e013332161511333216151406232122263534363b011101770d0d051f27
222001290b150b1316a059302828fdaa28283059a604310202231d182409
500303231efbc61d2824242424281d03d100>Courier AddT42Char 
1 3456 21 <000100a2000003e3050e0033008540632406051d000db97f1401141d2925
c41dbe001e197b0c7a057b08862289049f089b059a049a1b961f9d19a40f
a412aa06aa07aa08aa05aa04ad19a525b908b525bb07bb06bb1bbc04bc05
1c2f2c33302603000624050822250720030a072c202517033410d4c4c0d4
c4ec1112173917391139315d002fecfcc410c65dee111239393930212226
35343f0136370035342623220607060706232226353436373e0133321615
1401060f01213e0133321615140615070e0123010a3533c01d1d37015a7a
613f7323060d252e241e0e1340bd63a6dffeac572e7b01c9042721212602
08031e182b2d41b31c1c340146956b85342c0813432c3e2421133e49d69c
c4febb512e762b2d2c26030f034d1f230000>Courier AddT42Char 
1 4816 26 <000100cfffee03ec04ee0022006140401e171f16041a220c0b0003100cc4
1ad603ba23690b85008b0c9a0c9a0ba300a90cb300bb0cb90b0a17161a03
130d221b0c0b050300071e080d1e08601301132310d45dc4c4c411121739
11121739315d0010e4fcecc4113939113912173930250e012b0222263534
363701210e012322263534363f013e01332132161d011406070275080e13
1147141703030189fe04032423222101010a03231e02951d1b0a0b14180e
100e080f0a042b2f2d22240a0a045a1c1e191b220c272100>Courier AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>Courier AddT42Char 
Courier /CharStrings get begin
/slash 18 def
/one 20 def
/two 21 def
/seven 26 def
end
Courier /Encoding get
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 55 /seven put
pop
end
%ADOEndSubsetFont
/DNGMYP+Courier /Courier findfont ct_VMDictPut/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two 4{/.notdef}rp /seven 200{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf293.168 149.293 mo(7/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
149.293 247.962 mo
163.693 247.962 li
163.693 235.962 li
149.293 235.962 li
cp
clp
grestore
gsave
292.566 285.295 mo
328.582 285.295 li
328.582 273.285 li
292.566 273.285 li
cp
clp
gsave
292.567 285.294 mo
328.583 285.294 li
328.583 273.284 li
292.567 273.284 li
cp
clp
DNGMYP+Courier*1 [12.0002 0 0 -12 0 0 ]msf292.566 282.331 mo(11/12)[7.19998 7.20001 7.19998 7.20001 0 ]xshgrestore
grestore
gsave
195.044 260.604 mo
209.444 260.604 li
209.444 248.604 li
195.044 248.604 li
cp
clp
grestore
gsave
146.283 72.784 mo
160.683 72.784 li
160.683 60.784 li
146.283 60.784 li
cp
clp
grestore
gsave
186.014 55.326 mo
200.414 55.326 li
200.414 43.326 li
186.014 43.326 li
cp
clp
grestore
gsave
157.119 221.475 mo
171.519 221.475 li
171.519 209.475 li
157.119 209.475 li
cp
clp
grestore
gsave
145.681 217.261 mo
160.081 217.261 li
160.081 205.261 li
145.681 205.261 li
cp
clp
grestore
gsave
124.611 144.42 mo
139.011 144.42 li
139.011 132.42 li
124.611 132.42 li
cp
clp
grestore
gsave
319.656 193.783 mo
334.055 193.783 li
334.055 181.783 li
319.656 181.783 li
cp
clp
grestore
gsave
308.218 182.345 mo
322.618 182.345 li
322.618 170.345 li
308.218 170.345 li
cp
clp
grestore
gsave
107.154 212.445 mo
121.554 212.445 li
121.554 200.445 li
107.154 200.445 li
cp
clp
grestore
gsave
310.626 231.106 mo
325.026 231.106 li
325.026 219.106 li
310.626 219.106 li
cp
clp
grestore
gsave
320.859 263.012 mo
335.259 263.012 li
335.259 251.012 li
320.859 251.012 li
cp
clp
grestore
gsave
47.557 139.614 mo
76.372 139.614 li
76.372 127.604 li
47.557 127.604 li
cp
clp
gsave
47.557 139.614 mo
76.372 139.614 li
76.372 127.604 li
47.557 127.604 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 4036 23 <000200b2000003ee050c00020038009940638a01ba010201201d1c1a1514
0725182c0f102b040b252100c42f0b3109c418be03281538155602660276
0286029402a602b502092b2838322f22042c2002140c030f061d1c200903
15030600003501352c28061f0a001d0f2801281f30207f0f010f3910d45d
d43ce45dfc3ce410c6325d1112173912393911121739111217391139315d
002feeee32d43cfe3cc612173911121739305d0111090122263534363b01
352122263d0134373637013e01333217161f011e01151133323633321615
14060f010e012b01153332161514062302bafe85010f3022232774fe2d19
1c1d050301a60e120f060f0404660e113316180f141c020308071b1d5423
4030282801cd02a6fd5afe331f292421a8201e45282c080502cc190e0201
0110021b16fd08231e16090f0829241aa81f262424000000>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/four 23 def
end
DNGMYP+Courier /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /.notdef /four 2{/.notdef}rp /seven 200{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf47.5567 136.651 mo(4/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
62.0048 176.938 mo
90.8198 176.938 li
90.8198 164.928 li
62.0048 164.928 li
cp
clp
gsave
62.0048 176.938 mo
90.8198 176.938 li
90.8198 164.928 li
62.0048 164.928 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 4360 24 <000100acffdf040204ee002a0077404f1f2922001e033f1b4f1b5f1b031b
18b90f030103d712b9500f010f0929c422d609d52b6b176c136b087b177c
1394199011a419a01109221e2923001507260f060106001d6f0c7f0c020c
601e011e2b10d45dc45decd45dc4ec1139391239315d0010e4fcec10c65d
eef65dfec45d12393911123930013e013332161514042322263534363332
163332363534262322062322263511343633213216151406232101854270
33afe9fefec9a8e32a1c0bd55b86a79e785aad121e19293301fa3030322e
fe3b030e1817f3b4bff85b411a294da17f7ca55a2c3a01f2211d27272529
>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/five 24 def
end
DNGMYP+Courier /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /.notdef /four /five /.notdef /seven 200{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf62.0049 173.975 mo(5/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
84.2783 218.475 mo
113.093 218.475 li
113.093 206.465 li
84.2783 206.465 li
cp
clp
gsave
84.2783 218.475 mo
113.093 218.475 li
113.093 206.465 li
84.2783 206.465 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 3744 22 <000100b6ffdf03f8050e003100974074001d1523b9302601262c1db9150f
b90c06d52cbe1532042d142d5224520e5b106324630e69107024700e7b14
7b1e7b109400910194319424922e9405910ea52ea431a401a00ea50da024
b00eb300b431b201b42eb024bf082115001920072f120770030103602970
290229101920190219091e3210f4c45dc45dd45decd4ec113939315d0010
c4ecf4c4ec10ee10c65dee11123930011e01151406232226353436333216
3332363534262726272635343736373e0135342623220623222635343633
321615140603027581f8c598ed2b1f11d55c7795675a1b2c545220154e60
765b54b1161c25e0889ccf6302b020a97aafdf75461e2766886c597b1105
0305413b0a03040c684a5f7868241b3d79bd8a698800>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/three 22 def
end
DNGMYP+Courier /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /three /four /five /.notdef /seven 200{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf84.278 215.512 mo(3/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
129.427 234.116 mo
143.827 234.116 li
143.827 222.116 li
129.427 222.116 li
cp
clp
grestore
gsave
113.174 155.858 mo
127.574 155.858 li
127.574 143.858 li
113.174 143.858 li
cp
clp
grestore
gsave
73.4425 113.719 mo
87.8425 113.719 li
87.8425 101.719 li
73.4425 101.719 li
cp
clp
grestore
gsave
108.358 166.694 mo
122.758 166.694 li
122.758 154.694 li
108.358 154.694 li
cp
clp
grestore
gsave
124.009 149.838 mo
138.409 149.838 li
138.409 137.838 li
124.009 137.838 li
cp
clp
grestore
gsave
105.95 150.44 mo
120.35 150.44 li
120.35 138.44 li
105.95 138.44 li
cp
clp
grestore
gsave
56.5869 138.4 mo
70.9868 138.4 li
70.9868 126.4 li
56.5869 126.4 li
cp
clp
grestore
gsave
136.049 131.778 mo
150.449 131.778 li
150.449 119.778 li
136.049 119.778 li
cp
clp
grestore
gsave
272.7 71.59 mo
301.515 71.59 li
301.515 59.58 li
272.7 59.58 li
cp
clp
gsave
272.701 71.5897 mo
301.516 71.5897 li
301.516 59.5797 li
272.701 59.5797 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 5020 27 <000300cfffdf03fe050e000b0017002f0091407324180faf090109da03b9
2a15b91ebe2ad5300a1d051f1a1d151f7a087a04750a75028416840e820a
82028b148b108b088b049b1d9b2b941f94299b1894249b2f9b1994239425
a423a425ab2fab19a91ca620b620b623b625b91cb919b92e2624180c1207
21230607270c071b232700072d1c3010f4ecc4f4ec10eef4ee113939315d
0010e4fcec10eef45dce3939300114163332363534262322061314163332
36353426232206132e01353436333216151406071e011514062322263534
360173856e6f85886c6b880a8366678383676782216162deadaae2606565
6ce3b5b5e26c01586a84806a68817f01ee637e7f64607d7dfe793093629b
c7c8906b9430299f6ba5d0d2a7669f000000>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/eight 27 def
end
DNGMYP+Courier /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /three /four /five /.notdef /seven /eight 199{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf272.7 68.627 mo(8/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
325.675 104.689 mo
340.075 104.689 li
340.075 92.689 li
325.675 92.689 li
cp
clp
grestore
gsave
279.924 194.395 mo
308.739 194.395 li
308.739 182.385 li
279.924 182.385 li
cp
clp
gsave
279.924 194.395 mo
308.739 194.395 li
308.739 182.385 li
279.924 182.385 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf279.924 191.432 mo(5/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
283.536 319.609 mo
312.351 319.609 li
312.351 307.599 li
283.536 307.599 li
cp
clp
gsave
283.536 319.609 mo
312.351 319.609 li
312.351 307.599 li
283.536 307.599 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf283.536 316.646 mo(1/12)[7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
337.113 332.842 mo
351.513 332.842 li
351.513 320.842 li
337.113 320.842 li
cp
clp
grestore
gsave
353.969 249.768 mo
368.369 249.768 li
368.369 237.768 li
353.969 237.768 li
cp
clp
grestore
gsave
331.093 12.595 mo
345.493 12.595 li
345.493 .584991 li
331.093 .584991 li
cp
clp
gsave
331.093 12.5958 mo
345.493 12.5958 li
345.493 .585785 li
331.093 .585785 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 8756 43 <000100620000046a04a200460079404822b945e63324200311b92b18e443
350f0300c43c07332d3c36043430433d2b250428230f09181204100c201a
070104040040283844230f393034341d043821000f34150c3410324710fc
e432ccfc3ce43210e432fe3ce43211121739111217391112173911121739
31002f3cee1732fe3cee1732feee30253332161514062b0222263534363b
01112322263534363b0232161514062b011121112322263534363b023216
1514062b01113332161514062b0122263534363b0111210177433b302a47
db2d25252b3c12103c2d25272bd1502b364b2d01df4439312d58c72d2425
2a3618103c2c2a4ccf512c344931fe218d2025291f2424271e0385202825
231f292820fea4015c2226291f24242721fc7b1f26291f1f29271e01a000
>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/H 43 def
end
DNGMYP+Courier /Encoding get
dup 72 /H put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /three /four /five /.notdef /seven /eight 15{/.notdef}rp /H 183{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf331.092 9.6329 mo(H)shgrestore
grestore
gsave
346.143 70.988 mo
360.543 70.988 li
360.543 58.978 li
346.143 58.978 li
cp
clp
gsave
346.143 70.9877 mo
360.543 70.9877 li
360.543 58.9777 li
346.143 58.9777 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 12304 56 <0001003dffdf048d04a20032007d404d4415441954155419641564197414
74157219091a112c32040017c42f2a1b0f0300b92207e42fb5332a2b2427
23232b221c1f1a0f09100c070104001f381a2727342b0c38100f2b043408
00413310fc3ce4c4fce410e4fee411123939111239391112393912391112
391139310010e4fc3cec173210ee111739305d132322263534363b023216
1514062b01111416171e0133323635112322263534363b0232161514062b
0111140623222635b6103c2d26262dcd512c34492b1518237d4c8f83354e
352a42dd3024252c3a0ed9dac5eb0412202825231f292820fddc6f652a3d
44acc002371f29291f24242820fdb3f3f3f3ce00>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/U 56 def
end
DNGMYP+Courier /Encoding get
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /three /four /five /.notdef /seven /eight 15{/.notdef}rp /H 12{/.notdef}rp /U 170{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf346.143 68.025 mo(U)shgrestore
grestore
gsave
341.929 30.645 mo
356.329 30.645 li
356.329 18.645 li
341.929 18.645 li
cp
clp
grestore
gsave
347.949 145.032 mo
362.349 145.032 li
362.349 133.022 li
347.949 133.022 li
cp
clp
gsave
347.949 145.032 mo
362.349 145.032 li
362.349 133.022 li
347.949 133.022 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf347.949 142.069 mo(H)shgrestore
grestore
gsave
346.745 211.853 mo
361.145 211.853 li
361.145 199.843 li
346.745 199.843 li
cp
clp
gsave
346.745 211.853 mo
361.145 211.853 li
361.145 199.843 li
346.745 199.843 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf346.745 208.89 mo(U)shgrestore
grestore
gsave
347.949 286.499 mo
362.349 286.499 li
362.349 274.489 li
347.949 274.489 li
cp
clp
gsave
347.949 286.499 mo
362.349 286.499 li
362.349 274.489 li
347.949 274.489 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf347.949 283.536 mo(H)shgrestore
grestore
gsave
350.959 352.718 mo
365.359 352.718 li
365.359 340.708 li
350.959 340.708 li
cp
clp
gsave
350.959 352.718 mo
365.359 352.718 li
365.359 340.708 li
350.959 340.708 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf350.959 349.755 mo(U)shgrestore
grestore
gsave
328.685 34.256 mo
343.085 34.256 li
343.085 22.256 li
328.685 22.256 li
cp
clp
grestore
gsave
317.85 35.47 mo
361.068 35.47 li
361.068 23.46 li
317.85 23.46 li
cp
clp
gsave
317.85 35.4711 mo
361.068 35.4711 li
361.068 23.4611 li
317.85 23.4611 li
cp
clp
%ADOBeginSubsetFont: Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DNGMYP+Courier gcheck setglobal} if
1 4600 25 <000200cdffdf03fc050e000b002400614045201b220c1509d90f0f010fd7
03b91522b91bbe15d52504231423541654026b086b04640264167b087b04
74027416841a84148410a6231006071e221200200c071221181c2510f4e4
fce410e4ee315d0010e4fcec10eef65dee12391112393001141633323635
3426232206273e0133321615140623220211100021321615140706070602
018f8266607b7f64617f1636844e9eddd6a7c5ed015e011f613e764e2f9e
c501857b9b92767a9892984646eeaeb6ea013901050154019d1c27400201
091efeff0000>DNGMYP+Courier AddT42Char 
DNGMYP+Courier /CharStrings get begin
/six 25 def
end
DNGMYP+Courier /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/DNGMYP+Courier*1 [47{/.notdef}rp /slash /.notdef /one /two /three /four /five /six /seven /eight 15{/.notdef}rp /H 12{/.notdef}rp /U 170{/.notdef}rp]DNGMYP+Courier nfDNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf317.85 32.5078 mo(16/144)[7.19989 7.19989 7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
320.859 89.639 mo
335.259 89.639 li
335.259 77.639 li
320.859 77.639 li
cp
clp
grestore
gsave
317.248 90.251 mo
360.466 90.251 li
360.466 78.241 li
317.248 78.241 li
cp
clp
gsave
317.248 90.2513 mo
360.466 90.2513 li
360.466 78.2413 li
317.248 78.2413 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf317.248 87.288 mo(32/144)[7.19989 7.19989 7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
338.919 182.344 mo
360.533 182.344 li
360.533 151.684 li
338.919 151.684 li
cp
clp
gsave
338.919 182.344 mo
360.533 182.344 li
360.533 151.684 li
338.919 151.684 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf338.919 160.731 mo(35/)[7.19989 7.19989 0 ]xsh338.919 176.931 mo(144)[7.19989 7.19989 0 ]xshgrestore
grestore
gsave
346.143 63.754 mo
360.543 63.754 li
360.543 51.754 li
346.143 51.754 li
cp
clp
grestore
gsave
328.685 176.928 mo
343.085 176.928 li
343.085 164.928 li
328.685 164.928 li
cp
clp
grestore
gsave
329.287 207.629 mo
343.687 207.629 li
343.687 195.629 li
329.287 195.629 li
cp
clp
grestore
gsave
340.123 250.368 mo
361.737 250.368 li
361.737 219.708 li
340.123 219.708 li
cp
clp
gsave
340.123 250.368 mo
361.737 250.368 li
361.737 219.708 li
340.123 219.708 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf340.123 228.755 mo(25/)[7.19989 7.19989 0 ]xsh340.123 244.955 mo(144)[7.19989 7.19989 0 ]xshgrestore
grestore
gsave
337.715 323.811 mo
359.329 323.811 li
359.329 293.151 li
337.715 293.151 li
cp
clp
gsave
337.715 323.811 mo
359.329 323.811 li
359.329 293.151 li
337.715 293.151 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf337.715 302.198 mo(33/)[7.19989 7.19989 0 ]xsh337.715 318.398 mo(144)[7.19989 7.19989 0 ]xshgrestore
grestore
gsave
318.452 355.718 mo
332.852 355.718 li
332.852 343.718 li
318.452 343.718 li
cp
clp
grestore
gsave
307.014 360.534 mo
321.414 360.534 li
321.414 348.534 li
307.014 348.534 li
cp
clp
grestore
gsave
302.8 362.35 mo
338.816 362.35 li
338.816 350.34 li
302.8 350.34 li
cp
clp
gsave
302.8 362.35 mo
338.816 362.35 li
338.816 350.34 li
302.8 350.34 li
cp
clp
DNGMYP+Courier*1 [12 0 0 -12 0 0 ]msf302.8 359.387 mo(3/144)[7.19989 7.19989 7.19989 7.19989 0 ]xshgrestore
grestore
gsave
163.741 80.008 mo
178.141 80.008 li
178.141 68.008 li
163.741 68.008 li
cp
clp
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/DNGMYP+Courier*1 uf/DNGMYP+Courier uf/Courier ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
